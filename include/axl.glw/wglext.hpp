#pragma once

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#endif

#include "lib.hpp"
#include "gl.hpp"

namespace axl {
namespace glw {
namespace wglext {
using namespace axl::glw::gl;

constexpr GLulong WGL_WGLEXT_VERSION = 20200408;

// WGL_ARB_buffer_region
constexpr long WGL_FRONT_COLOR_BUFFER_BIT_ARB = 0x00000001;
constexpr long WGL_BACK_COLOR_BUFFER_BIT_ARB = 0x00000002;
constexpr long WGL_DEPTH_BUFFER_BIT_ARB = 0x00000004;
constexpr long WGL_STENCIL_BUFFER_BIT_ARB = 0x00000008;
typedef HANDLE (WINAPI * PFNWGLCREATEBUFFERREGIONARBPROC) (HDC hDC, int iLayerPlane, UINT uType);
typedef VOID (WINAPI * PFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE hRegion);
typedef BOOL (WINAPI * PFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height);
typedef BOOL (WINAPI * PFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
AXLGLWAPI PFNWGLCREATEBUFFERREGIONARBPROC wglCreateBufferRegionARB;
AXLGLWAPI PFNWGLDELETEBUFFERREGIONARBPROC wglDeleteBufferRegionARB;
AXLGLWAPI PFNWGLSAVEBUFFERREGIONARBPROC wglSaveBufferRegionARB;
AXLGLWAPI PFNWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB;
AXLGLWAPI bool _ARB_buffer_region;

// WGL_ARB_context_flush_control
constexpr long WGL_CONTEXT_RELEASE_BEHAVIOR_ARB = 0x2097;
constexpr long WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB = 0;
constexpr long WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB = 0x2098;
AXLGLWAPI bool _ARB_context_flush_control;

// WGL_ARB_create_context
constexpr long WGL_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
constexpr long WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
constexpr long WGL_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
constexpr long WGL_CONTEXT_MINOR_VERSION_ARB = 0x2092;
constexpr long WGL_CONTEXT_LAYER_PLANE_ARB = 0x2093;
constexpr long WGL_CONTEXT_FLAGS_ARB = 0x2094;
constexpr long ERROR_INVALID_VERSION_ARB = 0x2095;
typedef HGLRC (WINAPI * PFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC hDC, HGLRC hShareContext, const int *attribList);
AXLGLWAPI PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB;
AXLGLWAPI bool _ARB_create_context;

// WGL_ARB_create_context_no_error
constexpr long WGL_CONTEXT_OPENGL_NO_ERROR_ARB = 0x31B3;
AXLGLWAPI bool _ARB_create_context_no_error;

// WGL_ARB_create_context_profile
constexpr long WGL_CONTEXT_PROFILE_MASK_ARB = 0x9126;
constexpr long WGL_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
constexpr long WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
constexpr long ERROR_INVALID_PROFILE_ARB = 0x2096;
AXLGLWAPI bool _ARB_create_context_profile;

// WGL_ARB_create_context_robustness
constexpr long WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
constexpr long WGL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
constexpr long WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
constexpr long WGL_NO_RESET_NOTIFICATION_ARB = 0x8261;
AXLGLWAPI bool _ARB_create_context_robustness;

// WGL_ARB_extensions_string
typedef const char *(WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);
AXLGLWAPI PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB;
AXLGLWAPI bool _ARB_extensions_string;

// WGL_ARB_framebuffer_sRGB
constexpr long WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB = 0x20A9;
AXLGLWAPI bool _ARB_framebuffer_sRGB;

// WGL_ARB_make_current_read
constexpr long ERROR_INVALID_PIXEL_TYPE_ARB = 0x2043;
constexpr long ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB = 0x2054;
typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTARBPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCARBPROC) (void);
AXLGLWAPI PFNWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB;
AXLGLWAPI PFNWGLGETCURRENTREADDCARBPROC wglGetCurrentReadDCARB;
AXLGLWAPI bool _ARB_make_current_read;

// WGL_ARB_multisample
constexpr long WGL_SAMPLE_BUFFERS_ARB = 0x2041;
constexpr long WGL_SAMPLES_ARB = 0x2042;
AXLGLWAPI bool _ARB_multisample;

// WGL_ARB_pbuffer
DECLARE_HANDLE(HPBUFFERARB);
constexpr long WGL_DRAW_TO_PBUFFER_ARB = 0x202D;
constexpr long WGL_MAX_PBUFFER_PIXELS_ARB = 0x202E;
constexpr long WGL_MAX_PBUFFER_WIDTH_ARB = 0x202F;
constexpr long WGL_MAX_PBUFFER_HEIGHT_ARB = 0x2030;
constexpr long WGL_PBUFFER_LARGEST_ARB = 0x2033;
constexpr long WGL_PBUFFER_WIDTH_ARB = 0x2034;
constexpr long WGL_PBUFFER_HEIGHT_ARB = 0x2035;
constexpr long WGL_PBUFFER_LOST_ARB = 0x2036;
typedef HPBUFFERARB (WINAPI * PFNWGLCREATEPBUFFERARBPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
typedef HDC (WINAPI * PFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer);
typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer, HDC hDC);
typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB hPbuffer);
typedef BOOL (WINAPI * PFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
AXLGLWAPI PFNWGLCREATEPBUFFERARBPROC wglCreatePbufferARB;
AXLGLWAPI PFNWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB;
AXLGLWAPI PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB;
AXLGLWAPI PFNWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB;
AXLGLWAPI PFNWGLQUERYPBUFFERARBPROC wglQueryPbufferARB;
AXLGLWAPI bool _ARB_pbuffer;

// WGL_ARB_pixel_format
constexpr long WGL_NUMBER_PIXEL_FORMATS_ARB = 0x2000;
constexpr long WGL_DRAW_TO_WINDOW_ARB = 0x2001;
constexpr long WGL_DRAW_TO_BITMAP_ARB = 0x2002;
constexpr long WGL_ACCELERATION_ARB = 0x2003;
constexpr long WGL_NEED_PALETTE_ARB = 0x2004;
constexpr long WGL_NEED_SYSTEM_PALETTE_ARB = 0x2005;
constexpr long WGL_SWAP_LAYER_BUFFERS_ARB = 0x2006;
constexpr long WGL_SWAP_METHOD_ARB = 0x2007;
constexpr long WGL_NUMBER_OVERLAYS_ARB = 0x2008;
constexpr long WGL_NUMBER_UNDERLAYS_ARB = 0x2009;
constexpr long WGL_TRANSPARENT_ARB = 0x200A;
constexpr long WGL_TRANSPARENT_RED_VALUE_ARB = 0x2037;
constexpr long WGL_TRANSPARENT_GREEN_VALUE_ARB = 0x2038;
constexpr long WGL_TRANSPARENT_BLUE_VALUE_ARB = 0x2039;
constexpr long WGL_TRANSPARENT_ALPHA_VALUE_ARB = 0x203A;
constexpr long WGL_TRANSPARENT_INDEX_VALUE_ARB = 0x203B;
constexpr long WGL_SHARE_DEPTH_ARB = 0x200C;
constexpr long WGL_SHARE_STENCIL_ARB = 0x200D;
constexpr long WGL_SHARE_ACCUM_ARB = 0x200E;
constexpr long WGL_SUPPORT_GDI_ARB = 0x200F;
constexpr long WGL_SUPPORT_OPENGL_ARB = 0x2010;
constexpr long WGL_DOUBLE_BUFFER_ARB = 0x2011;
constexpr long WGL_STEREO_ARB = 0x2012;
constexpr long WGL_PIXEL_TYPE_ARB = 0x2013;
constexpr long WGL_COLOR_BITS_ARB = 0x2014;
constexpr long WGL_RED_BITS_ARB = 0x2015;
constexpr long WGL_RED_SHIFT_ARB = 0x2016;
constexpr long WGL_GREEN_BITS_ARB = 0x2017;
constexpr long WGL_GREEN_SHIFT_ARB = 0x2018;
constexpr long WGL_BLUE_BITS_ARB = 0x2019;
constexpr long WGL_BLUE_SHIFT_ARB = 0x201A;
constexpr long WGL_ALPHA_BITS_ARB = 0x201B;
constexpr long WGL_ALPHA_SHIFT_ARB = 0x201C;
constexpr long WGL_ACCUM_BITS_ARB = 0x201D;
constexpr long WGL_ACCUM_RED_BITS_ARB = 0x201E;
constexpr long WGL_ACCUM_GREEN_BITS_ARB = 0x201F;
constexpr long WGL_ACCUM_BLUE_BITS_ARB = 0x2020;
constexpr long WGL_ACCUM_ALPHA_BITS_ARB = 0x2021;
constexpr long WGL_DEPTH_BITS_ARB = 0x2022;
constexpr long WGL_STENCIL_BITS_ARB = 0x2023;
constexpr long WGL_AUX_BUFFERS_ARB = 0x2024;
constexpr long WGL_NO_ACCELERATION_ARB = 0x2025;
constexpr long WGL_GENERIC_ACCELERATION_ARB = 0x2026;
constexpr long WGL_FULL_ACCELERATION_ARB = 0x2027;
constexpr long WGL_SWAP_EXCHANGE_ARB = 0x2028;
constexpr long WGL_SWAP_COPY_ARB = 0x2029;
constexpr long WGL_SWAP_UNDEFINED_ARB = 0x202A;
constexpr long WGL_TYPE_RGBA_ARB = 0x202B;
constexpr long WGL_TYPE_COLORINDEX_ARB = 0x202C;
typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
AXLGLWAPI PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB;
AXLGLWAPI PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB;
AXLGLWAPI PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB;
AXLGLWAPI bool _ARB_pixel_format;

// WGL_ARB_pixel_format_float
constexpr long WGL_TYPE_RGBA_FLOAT_ARB = 0x21A0;
AXLGLWAPI bool _ARB_pixel_format_float;

// WGL_ARB_render_texture
constexpr long WGL_BIND_TO_TEXTURE_RGB_ARB = 0x2070;
constexpr long WGL_BIND_TO_TEXTURE_RGBA_ARB = 0x2071;
constexpr long WGL_TEXTURE_FORMAT_ARB = 0x2072;
constexpr long WGL_TEXTURE_TARGET_ARB = 0x2073;
constexpr long WGL_MIPMAP_TEXTURE_ARB = 0x2074;
constexpr long WGL_TEXTURE_RGB_ARB = 0x2075;
constexpr long WGL_TEXTURE_RGBA_ARB = 0x2076;
constexpr long WGL_NO_TEXTURE_ARB = 0x2077;
constexpr long WGL_TEXTURE_CUBE_MAP_ARB = 0x2078;
constexpr long WGL_TEXTURE_1D_ARB = 0x2079;
constexpr long WGL_TEXTURE_2D_ARB = 0x207A;
constexpr long WGL_MIPMAP_LEVEL_ARB = 0x207B;
constexpr long WGL_CUBE_MAP_FACE_ARB = 0x207C;
constexpr long WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x207D;
constexpr long WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x207E;
constexpr long WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x207F;
constexpr long WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x2080;
constexpr long WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x2081;
constexpr long WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x2082;
constexpr long WGL_FRONT_LEFT_ARB = 0x2083;
constexpr long WGL_FRONT_RIGHT_ARB = 0x2084;
constexpr long WGL_BACK_LEFT_ARB = 0x2085;
constexpr long WGL_BACK_RIGHT_ARB = 0x2086;
constexpr long WGL_AUX0_ARB = 0x2087;
constexpr long WGL_AUX1_ARB = 0x2088;
constexpr long WGL_AUX2_ARB = 0x2089;
constexpr long WGL_AUX3_ARB = 0x208A;
constexpr long WGL_AUX4_ARB = 0x208B;
constexpr long WGL_AUX5_ARB = 0x208C;
constexpr long WGL_AUX6_ARB = 0x208D;
constexpr long WGL_AUX7_ARB = 0x208E;
constexpr long WGL_AUX8_ARB = 0x208F;
constexpr long WGL_AUX9_ARB = 0x2090;
typedef BOOL (WINAPI * PFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int *piAttribList);
AXLGLWAPI PFNWGLBINDTEXIMAGEARBPROC wglBindTexImageARB;
AXLGLWAPI PFNWGLRELEASETEXIMAGEARBPROC wglReleaseTexImageARB;
AXLGLWAPI PFNWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB;
AXLGLWAPI bool _ARB_render_texture;

// WGL_ARB_robustness_application_isolation
constexpr long WGL_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;
AXLGLWAPI bool _ARB_robustness_application_isolation;

// WGL_ARB_robustness_share_group_isolation
AXLGLWAPI bool _ARB_robustness_share_group_isolation;

// WGL_3DFX_multisample
constexpr long WGL_SAMPLE_BUFFERS_3DFX = 0x2060;
constexpr long WGL_SAMPLES_3DFX = 0x2061;
AXLGLWAPI bool _3DFX_multisample;

// WGL_3DL_stereo_control
constexpr long WGL_STEREO_EMITTER_ENABLE_3DL = 0x2055;
constexpr long WGL_STEREO_EMITTER_DISABLE_3DL = 0x2056;
constexpr long WGL_STEREO_POLARITY_NORMAL_3DL = 0x2057;
constexpr long WGL_STEREO_POLARITY_INVERT_3DL = 0x2058;
typedef BOOL (WINAPI * PFNWGLSETSTEREOEMITTERSTATE3DLPROC) (HDC hDC, UINT uState);
AXLGLWAPI PFNWGLSETSTEREOEMITTERSTATE3DLPROC wglSetStereoEmitterState3DL;
AXLGLWAPI bool _3DL_stereo_control;

// WGL_AMD_gpu_association
constexpr long WGL_GPU_VENDOR_AMD = 0x1F00;
constexpr long WGL_GPU_RENDERER_STRING_AMD = 0x1F01;
constexpr long WGL_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
constexpr long WGL_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
constexpr long WGL_GPU_RAM_AMD = 0x21A3;
constexpr long WGL_GPU_CLOCK_AMD = 0x21A4;
constexpr long WGL_GPU_NUM_PIPES_AMD = 0x21A5;
constexpr long WGL_GPU_NUM_SIMD_AMD = 0x21A6;
constexpr long WGL_GPU_NUM_RB_AMD = 0x21A7;
constexpr long WGL_GPU_NUM_SPI_AMD = 0x21A8;
typedef UINT (WINAPI * PFNWGLGETGPUIDSAMDPROC) (UINT maxCount, UINT *ids);
typedef INT (WINAPI * PFNWGLGETGPUINFOAMDPROC) (UINT id, INT property, GLenum dataType, UINT size, void *data);
typedef UINT (WINAPI * PFNWGLGETCONTEXTGPUIDAMDPROC) (HGLRC hglrc);
typedef HGLRC (WINAPI * PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) (UINT id);
typedef HGLRC (WINAPI * PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) (UINT id, HGLRC hShareContext, const int *attribList);
typedef BOOL (WINAPI * PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) (HGLRC hglrc);
typedef BOOL (WINAPI * PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) (HGLRC hglrc);
typedef HGLRC (WINAPI * PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) (void);
typedef VOID (WINAPI * PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
AXLGLWAPI PFNWGLGETGPUIDSAMDPROC wglGetGPUIDsAMD;
AXLGLWAPI PFNWGLGETGPUINFOAMDPROC wglGetGPUInfoAMD;
AXLGLWAPI PFNWGLGETCONTEXTGPUIDAMDPROC wglGetContextGPUIDAMD;
AXLGLWAPI PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC wglCreateAssociatedContextAMD;
AXLGLWAPI PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC wglCreateAssociatedContextAttribsAMD;
AXLGLWAPI PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC wglDeleteAssociatedContextAMD;
AXLGLWAPI PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC wglMakeAssociatedContextCurrentAMD;
AXLGLWAPI PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC wglGetCurrentAssociatedContextAMD;
AXLGLWAPI PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC wglBlitContextFramebufferAMD;
AXLGLWAPI bool _AMD_gpu_association;

// WGL_ATI_pixel_format_float
constexpr long WGL_TYPE_RGBA_FLOAT_ATI = 0x21A0;
AXLGLWAPI bool _ATI_pixel_format_float;

// WGL_ATI_render_texture_rectangle
constexpr long WGL_TEXTURE_RECTANGLE_ATI = 0x21A5;
AXLGLWAPI bool _ATI_render_texture_rectangle;

// WGL_EXT_colorspace
constexpr long WGL_COLORSPACE_EXT = 0x309D;
constexpr long WGL_COLORSPACE_SRGB_EXT = 0x3089;
constexpr long WGL_COLORSPACE_LINEAR_EXT = 0x308A;
AXLGLWAPI bool _EXT_colorspace;

// WGL_EXT_create_context_es2_profile
constexpr long WGL_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;
AXLGLWAPI bool _EXT_create_context_es2_profile;

// WGL_EXT_create_context_es_profile
constexpr long WGL_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
AXLGLWAPI bool _EXT_create_context_es_profile;

// WGL_EXT_depth_float
constexpr long WGL_DEPTH_FLOAT_EXT = 0x2040;
AXLGLWAPI bool _EXT_depth_float;

// WGL_EXT_display_color_table
typedef GLboolean (WINAPI * PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) (GLushort id);
typedef GLboolean (WINAPI * PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) (const GLushort *table, GLuint length);
typedef GLboolean (WINAPI * PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) (GLushort id);
typedef VOID (WINAPI * PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) (GLushort id);
AXLGLWAPI PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC wglCreateDisplayColorTableEXT;
AXLGLWAPI PFNWGLLOADDISPLAYCOLORTABLEEXTPROC wglLoadDisplayColorTableEXT;
AXLGLWAPI PFNWGLBINDDISPLAYCOLORTABLEEXTPROC wglBindDisplayColorTableEXT;
AXLGLWAPI PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC wglDestroyDisplayColorTableEXT;
AXLGLWAPI bool _EXT_display_color_table;

// WGL_EXT_extensions_string
typedef const char *(WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);
AXLGLWAPI PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT;
AXLGLWAPI bool _EXT_extensions_string;

// WGL_EXT_framebuffer_sRGB
constexpr long WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20A9;
AXLGLWAPI bool _EXT_framebuffer_sRGB;

// WGL_EXT_make_current_read
constexpr long ERROR_INVALID_PIXEL_TYPE_EXT = 0x2043;
typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTEXTPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCEXTPROC) (void);
AXLGLWAPI PFNWGLMAKECONTEXTCURRENTEXTPROC wglMakeContextCurrentEXT;
AXLGLWAPI PFNWGLGETCURRENTREADDCEXTPROC wglGetCurrentReadDCEXT;
AXLGLWAPI bool _EXT_make_current_read;

// WGL_EXT_multisample
constexpr long WGL_SAMPLE_BUFFERS_EXT = 0x2041;
constexpr long WGL_SAMPLES_EXT = 0x2042;
AXLGLWAPI bool _EXT_multisample;

// WGL_EXT_pbuffer
DECLARE_HANDLE(HPBUFFEREXT);
constexpr long WGL_DRAW_TO_PBUFFER_EXT = 0x202D;
constexpr long WGL_MAX_PBUFFER_PIXELS_EXT = 0x202E;
constexpr long WGL_MAX_PBUFFER_WIDTH_EXT = 0x202F;
constexpr long WGL_MAX_PBUFFER_HEIGHT_EXT = 0x2030;
constexpr long WGL_OPTIMAL_PBUFFER_WIDTH_EXT = 0x2031;
constexpr long WGL_OPTIMAL_PBUFFER_HEIGHT_EXT = 0x2032;
constexpr long WGL_PBUFFER_LARGEST_EXT = 0x2033;
constexpr long WGL_PBUFFER_WIDTH_EXT = 0x2034;
constexpr long WGL_PBUFFER_HEIGHT_EXT = 0x2035;
typedef HPBUFFEREXT (WINAPI * PFNWGLCREATEPBUFFEREXTPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
typedef HDC (WINAPI * PFNWGLGETPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer);
typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer, HDC hDC);
typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer);
typedef BOOL (WINAPI * PFNWGLQUERYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
AXLGLWAPI PFNWGLCREATEPBUFFEREXTPROC wglCreatePbufferEXT;
AXLGLWAPI PFNWGLGETPBUFFERDCEXTPROC wglGetPbufferDCEXT;
AXLGLWAPI PFNWGLRELEASEPBUFFERDCEXTPROC wglReleasePbufferDCEXT;
AXLGLWAPI PFNWGLDESTROYPBUFFEREXTPROC wglDestroyPbufferEXT;
AXLGLWAPI PFNWGLQUERYPBUFFEREXTPROC wglQueryPbufferEXT;
AXLGLWAPI bool _EXT_pbuffer;

// WGL_EXT_pixel_format
constexpr long WGL_NUMBER_PIXEL_FORMATS_EXT = 0x2000;
constexpr long WGL_DRAW_TO_WINDOW_EXT = 0x2001;
constexpr long WGL_DRAW_TO_BITMAP_EXT = 0x2002;
constexpr long WGL_ACCELERATION_EXT = 0x2003;
constexpr long WGL_NEED_PALETTE_EXT = 0x2004;
constexpr long WGL_NEED_SYSTEM_PALETTE_EXT = 0x2005;
constexpr long WGL_SWAP_LAYER_BUFFERS_EXT = 0x2006;
constexpr long WGL_SWAP_METHOD_EXT = 0x2007;
constexpr long WGL_NUMBER_OVERLAYS_EXT = 0x2008;
constexpr long WGL_NUMBER_UNDERLAYS_EXT = 0x2009;
constexpr long WGL_TRANSPARENT_EXT = 0x200A;
constexpr long WGL_TRANSPARENT_VALUE_EXT = 0x200B;
constexpr long WGL_SHARE_DEPTH_EXT = 0x200C;
constexpr long WGL_SHARE_STENCIL_EXT = 0x200D;
constexpr long WGL_SHARE_ACCUM_EXT = 0x200E;
constexpr long WGL_SUPPORT_GDI_EXT = 0x200F;
constexpr long WGL_SUPPORT_OPENGL_EXT = 0x2010;
constexpr long WGL_DOUBLE_BUFFER_EXT = 0x2011;
constexpr long WGL_STEREO_EXT = 0x2012;
constexpr long WGL_PIXEL_TYPE_EXT = 0x2013;
constexpr long WGL_COLOR_BITS_EXT = 0x2014;
constexpr long WGL_RED_BITS_EXT = 0x2015;
constexpr long WGL_RED_SHIFT_EXT = 0x2016;
constexpr long WGL_GREEN_BITS_EXT = 0x2017;
constexpr long WGL_GREEN_SHIFT_EXT = 0x2018;
constexpr long WGL_BLUE_BITS_EXT = 0x2019;
constexpr long WGL_BLUE_SHIFT_EXT = 0x201A;
constexpr long WGL_ALPHA_BITS_EXT = 0x201B;
constexpr long WGL_ALPHA_SHIFT_EXT = 0x201C;
constexpr long WGL_ACCUM_BITS_EXT = 0x201D;
constexpr long WGL_ACCUM_RED_BITS_EXT = 0x201E;
constexpr long WGL_ACCUM_GREEN_BITS_EXT = 0x201F;
constexpr long WGL_ACCUM_BLUE_BITS_EXT = 0x2020;
constexpr long WGL_ACCUM_ALPHA_BITS_EXT = 0x2021;
constexpr long WGL_DEPTH_BITS_EXT = 0x2022;
constexpr long WGL_STENCIL_BITS_EXT = 0x2023;
constexpr long WGL_AUX_BUFFERS_EXT = 0x2024;
constexpr long WGL_NO_ACCELERATION_EXT = 0x2025;
constexpr long WGL_GENERIC_ACCELERATION_EXT = 0x2026;
constexpr long WGL_FULL_ACCELERATION_EXT = 0x2027;
constexpr long WGL_SWAP_EXCHANGE_EXT = 0x2028;
constexpr long WGL_SWAP_COPY_EXT = 0x2029;
constexpr long WGL_SWAP_UNDEFINED_EXT = 0x202A;
constexpr long WGL_TYPE_RGBA_EXT = 0x202B;
constexpr long WGL_TYPE_COLORINDEX_EXT = 0x202C;
typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues);
typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues);
typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATEXTPROC) (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
AXLGLWAPI PFNWGLGETPIXELFORMATATTRIBIVEXTPROC wglGetPixelFormatAttribivEXT;
AXLGLWAPI PFNWGLGETPIXELFORMATATTRIBFVEXTPROC wglGetPixelFormatAttribfvEXT;
AXLGLWAPI PFNWGLCHOOSEPIXELFORMATEXTPROC wglChoosePixelFormatEXT;
AXLGLWAPI bool _EXT_pixel_format;

// WGL_EXT_pixel_format_packed_float
constexpr long WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT = 0x20A8;
AXLGLWAPI bool _EXT_pixel_format_packed_float;

// WGL_EXT_swap_control
typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC) (int interval);
typedef int (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC) (void);
AXLGLWAPI PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT;
AXLGLWAPI PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT;
AXLGLWAPI bool _EXT_swap_control;

// WGL_EXT_swap_control_tear
AXLGLWAPI bool _EXT_swap_control_tear;

// WGL_I3D_digital_video_control
constexpr long WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D = 0x2050;
constexpr long WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D = 0x2051;
constexpr long WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D = 0x2052;
constexpr long WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D = 0x2053;
typedef BOOL (WINAPI * PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int *piValue);
typedef BOOL (WINAPI * PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int *piValue);
AXLGLWAPI PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC wglGetDigitalVideoParametersI3D;
AXLGLWAPI PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC wglSetDigitalVideoParametersI3D;
AXLGLWAPI bool _I3D_digital_video_control;

// WGL_I3D_gamma
constexpr long WGL_GAMMA_TABLE_SIZE_I3D = 0x204E;
constexpr long WGL_GAMMA_EXCLUDE_DESKTOP_I3D = 0x204F;
typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int *piValue);
typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int *piValue);
typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
AXLGLWAPI PFNWGLGETGAMMATABLEPARAMETERSI3DPROC wglGetGammaTableParametersI3D;
AXLGLWAPI PFNWGLSETGAMMATABLEPARAMETERSI3DPROC wglSetGammaTableParametersI3D;
AXLGLWAPI PFNWGLGETGAMMATABLEI3DPROC wglGetGammaTableI3D;
AXLGLWAPI PFNWGLSETGAMMATABLEI3DPROC wglSetGammaTableI3D;
AXLGLWAPI bool _I3D_gamma;

// WGL_I3D_genlock
constexpr long WGL_GENLOCK_SOURCE_MULTIVIEW_I3D = 0x2044;
constexpr long WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D = 0x2045;
constexpr long WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D = 0x2046;
constexpr long WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D = 0x2047;
constexpr long WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D = 0x2048;
constexpr long WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D = 0x2049;
constexpr long WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D = 0x204A;
constexpr long WGL_GENLOCK_SOURCE_EDGE_RISING_I3D = 0x204B;
constexpr long WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D = 0x204C;
typedef BOOL (WINAPI * PFNWGLENABLEGENLOCKI3DPROC) (HDC hDC);
typedef BOOL (WINAPI * PFNWGLDISABLEGENLOCKI3DPROC) (HDC hDC);
typedef BOOL (WINAPI * PFNWGLISENABLEDGENLOCKI3DPROC) (HDC hDC, BOOL *pFlag);
typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEI3DPROC) (HDC hDC, UINT uSource);
typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEI3DPROC) (HDC hDC, UINT *uSource);
typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT uEdge);
typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT *uEdge);
typedef BOOL (WINAPI * PFNWGLGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT uRate);
typedef BOOL (WINAPI * PFNWGLGETGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT *uRate);
typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT uDelay);
typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT *uDelay);
typedef BOOL (WINAPI * PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) (HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);
AXLGLWAPI PFNWGLENABLEGENLOCKI3DPROC wglEnableGenlockI3D;
AXLGLWAPI PFNWGLDISABLEGENLOCKI3DPROC wglDisableGenlockI3D;
AXLGLWAPI PFNWGLISENABLEDGENLOCKI3DPROC wglIsEnabledGenlockI3D;
AXLGLWAPI PFNWGLGENLOCKSOURCEI3DPROC wglGenlockSourceI3D;
AXLGLWAPI PFNWGLGETGENLOCKSOURCEI3DPROC wglGetGenlockSourceI3D;
AXLGLWAPI PFNWGLGENLOCKSOURCEEDGEI3DPROC wglGenlockSourceEdgeI3D;
AXLGLWAPI PFNWGLGETGENLOCKSOURCEEDGEI3DPROC wglGetGenlockSourceEdgeI3D;
AXLGLWAPI PFNWGLGENLOCKSAMPLERATEI3DPROC wglGenlockSampleRateI3D;
AXLGLWAPI PFNWGLGETGENLOCKSAMPLERATEI3DPROC wglGetGenlockSampleRateI3D;
AXLGLWAPI PFNWGLGENLOCKSOURCEDELAYI3DPROC wglGenlockSourceDelayI3D;
AXLGLWAPI PFNWGLGETGENLOCKSOURCEDELAYI3DPROC wglGetGenlockSourceDelayI3D;
AXLGLWAPI PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC wglQueryGenlockMaxSourceDelayI3D;
AXLGLWAPI bool _I3D_genlock;

// WGL_I3D_image_buffer
constexpr long WGL_IMAGE_BUFFER_MIN_ACCESS_I3D = 0x00000001;
constexpr long WGL_IMAGE_BUFFER_LOCK_I3D = 0x00000002;
typedef LPVOID (WINAPI * PFNWGLCREATEIMAGEBUFFERI3DPROC) (HDC hDC, DWORD dwSize, UINT uFlags);
typedef BOOL (WINAPI * PFNWGLDESTROYIMAGEBUFFERI3DPROC) (HDC hDC, LPVOID pAddress);
typedef BOOL (WINAPI * PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) (HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
typedef BOOL (WINAPI * PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) (HDC hDC, const LPVOID *pAddress, UINT count);
AXLGLWAPI PFNWGLCREATEIMAGEBUFFERI3DPROC wglCreateImageBufferI3D;
AXLGLWAPI PFNWGLDESTROYIMAGEBUFFERI3DPROC wglDestroyImageBufferI3D;
AXLGLWAPI PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC wglAssociateImageBufferEventsI3D;
AXLGLWAPI PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC wglReleaseImageBufferEventsI3D;
AXLGLWAPI bool _I3D_image_buffer;

// WGL_I3D_swap_frame_lock
typedef BOOL (WINAPI * PFNWGLENABLEFRAMELOCKI3DPROC) (void);
typedef BOOL (WINAPI * PFNWGLDISABLEFRAMELOCKI3DPROC) (void);
typedef BOOL (WINAPI * PFNWGLISENABLEDFRAMELOCKI3DPROC) (BOOL *pFlag);
typedef BOOL (WINAPI * PFNWGLQUERYFRAMELOCKMASTERI3DPROC) (BOOL *pFlag);
AXLGLWAPI PFNWGLENABLEFRAMELOCKI3DPROC wglEnableFrameLockI3D;
AXLGLWAPI PFNWGLDISABLEFRAMELOCKI3DPROC wglDisableFrameLockI3D;
AXLGLWAPI PFNWGLISENABLEDFRAMELOCKI3DPROC wglIsEnabledFrameLockI3D;
AXLGLWAPI PFNWGLQUERYFRAMELOCKMASTERI3DPROC wglQueryFrameLockMasterI3D;
AXLGLWAPI bool _I3D_swap_frame_lock;

// WGL_I3D_swap_frame_usage
typedef BOOL (WINAPI * PFNWGLGETFRAMEUSAGEI3DPROC) (float *pUsage);
typedef BOOL (WINAPI * PFNWGLBEGINFRAMETRACKINGI3DPROC) (void);
typedef BOOL (WINAPI * PFNWGLENDFRAMETRACKINGI3DPROC) (void);
typedef BOOL (WINAPI * PFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
AXLGLWAPI PFNWGLGETFRAMEUSAGEI3DPROC wglGetFrameUsageI3D;
AXLGLWAPI PFNWGLBEGINFRAMETRACKINGI3DPROC wglBeginFrameTrackingI3D;
AXLGLWAPI PFNWGLENDFRAMETRACKINGI3DPROC wglEndFrameTrackingI3D;
AXLGLWAPI PFNWGLQUERYFRAMETRACKINGI3DPROC wglQueryFrameTrackingI3D;
AXLGLWAPI bool _I3D_swap_frame_usage;

// WGL_NV_DX_interop
constexpr long WGL_ACCESS_READ_ONLY_NV = 0x00000000;
constexpr long WGL_ACCESS_READ_WRITE_NV = 0x00000001;
constexpr long WGL_ACCESS_WRITE_DISCARD_NV = 0x00000002;
typedef BOOL (WINAPI * PFNWGLDXSETRESOURCESHAREHANDLENVPROC) (void *dxObject, HANDLE shareHandle);
typedef HANDLE (WINAPI * PFNWGLDXOPENDEVICENVPROC) (void *dxDevice);
typedef BOOL (WINAPI * PFNWGLDXCLOSEDEVICENVPROC) (HANDLE hDevice);
typedef HANDLE (WINAPI * PFNWGLDXREGISTEROBJECTNVPROC) (HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access);
typedef BOOL (WINAPI * PFNWGLDXUNREGISTEROBJECTNVPROC) (HANDLE hDevice, HANDLE hObject);
typedef BOOL (WINAPI * PFNWGLDXOBJECTACCESSNVPROC) (HANDLE hObject, GLenum access);
typedef BOOL (WINAPI * PFNWGLDXLOCKOBJECTSNVPROC) (HANDLE hDevice, GLint count, HANDLE *hObjects);
typedef BOOL (WINAPI * PFNWGLDXUNLOCKOBJECTSNVPROC) (HANDLE hDevice, GLint count, HANDLE *hObjects);
AXLGLWAPI PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV;
AXLGLWAPI PFNWGLDXOPENDEVICENVPROC wglDXOpenDeviceNV;
AXLGLWAPI PFNWGLDXCLOSEDEVICENVPROC wglDXCloseDeviceNV;
AXLGLWAPI PFNWGLDXREGISTEROBJECTNVPROC wglDXRegisterObjectNV;
AXLGLWAPI PFNWGLDXUNREGISTEROBJECTNVPROC wglDXUnregisterObjectNV;
AXLGLWAPI PFNWGLDXOBJECTACCESSNVPROC wglDXObjectAccessNV;
AXLGLWAPI PFNWGLDXLOCKOBJECTSNVPROC wglDXLockObjectsNV;
AXLGLWAPI PFNWGLDXUNLOCKOBJECTSNVPROC wglDXUnlockObjectsNV;
AXLGLWAPI bool _NV_DX_interop;

// WGL_NV_DX_interop2
AXLGLWAPI bool _NV_DX_interop2;

// WGL_NV_copy_image
typedef BOOL (WINAPI * PFNWGLCOPYIMAGESUBDATANVPROC) (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
AXLGLWAPI PFNWGLCOPYIMAGESUBDATANVPROC wglCopyImageSubDataNV;
AXLGLWAPI bool _NV_copy_image;

// WGL_NV_delay_before_swap
typedef BOOL (WINAPI * PFNWGLDELAYBEFORESWAPNVPROC) (HDC hDC, GLfloat seconds);
AXLGLWAPI PFNWGLDELAYBEFORESWAPNVPROC wglDelayBeforeSwapNV;
AXLGLWAPI bool _NV_delay_before_swap;

// WGL_NV_float_buffer
constexpr long WGL_FLOAT_COMPONENTS_NV = 0x20B0;
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV = 0x20B1;
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV = 0x20B2;
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV = 0x20B3;
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV = 0x20B4;
constexpr long WGL_TEXTURE_FLOAT_R_NV = 0x20B5;
constexpr long WGL_TEXTURE_FLOAT_RG_NV = 0x20B6;
constexpr long WGL_TEXTURE_FLOAT_RGB_NV = 0x20B7;
constexpr long WGL_TEXTURE_FLOAT_RGBA_NV = 0x20B8;
AXLGLWAPI bool _NV_float_buffer;

// WGL_NV_gpu_affinity
DECLARE_HANDLE(HGPUNV);
struct _GPU_DEVICE {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  Flags;
    RECT   rcVirtualScreen;
};
typedef struct _GPU_DEVICE *PGPU_DEVICE;
constexpr long ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV = 0x20D0;
constexpr long ERROR_MISSING_AFFINITY_MASK_NV = 0x20D1;
typedef BOOL (WINAPI * PFNWGLENUMGPUSNVPROC) (UINT iGpuIndex, HGPUNV *phGpu);
typedef BOOL (WINAPI * PFNWGLENUMGPUDEVICESNVPROC) (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
typedef HDC (WINAPI * PFNWGLCREATEAFFINITYDCNVPROC) (const HGPUNV *phGpuList);
typedef BOOL (WINAPI * PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
typedef BOOL (WINAPI * PFNWGLDELETEDCNVPROC) (HDC hdc);
AXLGLWAPI PFNWGLENUMGPUSNVPROC wglEnumGpusNV;
AXLGLWAPI PFNWGLENUMGPUDEVICESNVPROC wglEnumGpuDevicesNV;
AXLGLWAPI PFNWGLCREATEAFFINITYDCNVPROC wglCreateAffinityDCNV;
AXLGLWAPI PFNWGLENUMGPUSFROMAFFINITYDCNVPROC wglEnumGpusFromAffinityDCNV;
AXLGLWAPI PFNWGLDELETEDCNVPROC wglDeleteDCNV;
AXLGLWAPI bool _NV_gpu_affinity;

// WGL_NV_multigpu_context
constexpr long WGL_CONTEXT_MULTIGPU_ATTRIB_NV = 0x20AA;
constexpr long WGL_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV = 0x20AB;
constexpr long WGL_CONTEXT_MULTIGPU_ATTRIB_AFR_NV = 0x20AC;
constexpr long WGL_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV = 0x20AD;
constexpr long WGL_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV = 0x20AE;
AXLGLWAPI bool _NV_multigpu_context;

// WGL_NV_multisample_coverage
constexpr long WGL_COVERAGE_SAMPLES_NV = 0x2042;
constexpr long WGL_COLOR_SAMPLES_NV = 0x20B9;
AXLGLWAPI bool _NV_multisample_coverage;

// WGL_NV_present_video
DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);
constexpr long WGL_NUM_VIDEO_SLOTS_NV = 0x20F0;
typedef int (WINAPI * PFNWGLENUMERATEVIDEODEVICESNVPROC) (HDC hDc, HVIDEOOUTPUTDEVICENV *phDeviceList);
typedef BOOL (WINAPI * PFNWGLBINDVIDEODEVICENVPROC) (HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
typedef BOOL (WINAPI * PFNWGLQUERYCURRENTCONTEXTNVPROC) (int iAttribute, int *piValue);
AXLGLWAPI PFNWGLENUMERATEVIDEODEVICESNVPROC wglEnumerateVideoDevicesNV;
AXLGLWAPI PFNWGLBINDVIDEODEVICENVPROC wglBindVideoDeviceNV;
AXLGLWAPI PFNWGLQUERYCURRENTCONTEXTNVPROC wglQueryCurrentContextNV;
AXLGLWAPI bool _NV_present_video;

// WGL_NV_render_depth_texture
constexpr long WGL_BIND_TO_TEXTURE_DEPTH_NV = 0x20A3;
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV = 0x20A4;
constexpr long WGL_DEPTH_TEXTURE_FORMAT_NV = 0x20A5;
constexpr long WGL_TEXTURE_DEPTH_COMPONENT_NV = 0x20A6;
constexpr long WGL_DEPTH_COMPONENT_NV = 0x20A7;
AXLGLWAPI bool _NV_render_depth_texture;

// WGL_NV_render_texture_rectangle
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV = 0x20A0;
constexpr long WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV = 0x20A1;
constexpr long WGL_TEXTURE_RECTANGLE_NV          = 0x20A2;
AXLGLWAPI bool _NV_render_texture_rectangle;

// WGL_NV_swap_group
typedef BOOL (WINAPI * PFNWGLJOINSWAPGROUPNVPROC) (HDC hDC, GLuint group);
typedef BOOL (WINAPI * PFNWGLBINDSWAPBARRIERNVPROC) (GLuint group, GLuint barrier);
typedef BOOL (WINAPI * PFNWGLQUERYSWAPGROUPNVPROC) (HDC hDC, GLuint *group, GLuint *barrier);
typedef BOOL (WINAPI * PFNWGLQUERYMAXSWAPGROUPSNVPROC) (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
typedef BOOL (WINAPI * PFNWGLQUERYFRAMECOUNTNVPROC) (HDC hDC, GLuint *count);
typedef BOOL (WINAPI * PFNWGLRESETFRAMECOUNTNVPROC) (HDC hDC);
AXLGLWAPI PFNWGLJOINSWAPGROUPNVPROC wglJoinSwapGroupNV;
AXLGLWAPI PFNWGLBINDSWAPBARRIERNVPROC wglBindSwapBarrierNV;
AXLGLWAPI PFNWGLQUERYSWAPGROUPNVPROC wglQuerySwapGroupNV;
AXLGLWAPI PFNWGLQUERYMAXSWAPGROUPSNVPROC wglQueryMaxSwapGroupsNV;
AXLGLWAPI PFNWGLQUERYFRAMECOUNTNVPROC wglQueryFrameCountNV;
AXLGLWAPI PFNWGLRESETFRAMECOUNTNVPROC wglResetFrameCountNV;
AXLGLWAPI bool _NV_swap_group;

// WGL_NV_vertex_array_range
typedef void *(WINAPI * PFNWGLALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
typedef void (WINAPI * PFNWGLFREEMEMORYNVPROC) (void *pointer);
AXLGLWAPI PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV;
AXLGLWAPI PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV;
AXLGLWAPI bool _NV_vertex_array_range;

// WGL_NV_video_capture
DECLARE_HANDLE(HVIDEOINPUTDEVICENV);
constexpr long WGL_UNIQUE_ID_NV = 0x20CE;
constexpr long WGL_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;
typedef BOOL (WINAPI * PFNWGLBINDVIDEOCAPTUREDEVICENVPROC) (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
typedef UINT (WINAPI * PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC) (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
typedef BOOL (WINAPI * PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
typedef BOOL (WINAPI * PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
AXLGLWAPI PFNWGLBINDVIDEOCAPTUREDEVICENVPROC wglBindVideoCaptureDeviceNV;
AXLGLWAPI PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC wglEnumerateVideoCaptureDevicesNV;
AXLGLWAPI PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC wglLockVideoCaptureDeviceNV;
AXLGLWAPI PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC wglQueryVideoCaptureDeviceNV;
AXLGLWAPI PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC wglReleaseVideoCaptureDeviceNV;
AXLGLWAPI bool _NV_video_capture;

// WGL_NV_video_output
DECLARE_HANDLE(HPVIDEODEV);
constexpr long WGL_BIND_TO_VIDEO_RGB_NV = 0x20C0;
constexpr long WGL_BIND_TO_VIDEO_RGBA_NV = 0x20C1;
constexpr long WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV = 0x20C2;
constexpr long WGL_VIDEO_OUT_COLOR_NV = 0x20C3;
constexpr long WGL_VIDEO_OUT_ALPHA_NV = 0x20C4;
constexpr long WGL_VIDEO_OUT_DEPTH_NV = 0x20C5;
constexpr long WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
constexpr long WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
constexpr long WGL_VIDEO_OUT_FRAME = 0x20C8;
constexpr long WGL_VIDEO_OUT_FIELD_1 = 0x20C9;
constexpr long WGL_VIDEO_OUT_FIELD_2 = 0x20CA;
constexpr long WGL_VIDEO_OUT_STACKED_FIELDS_1_2 = 0x20CB;
constexpr long WGL_VIDEO_OUT_STACKED_FIELDS_2_1 = 0x20CC;
typedef BOOL (WINAPI * PFNWGLGETVIDEODEVICENVPROC) (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
typedef BOOL (WINAPI * PFNWGLRELEASEVIDEODEVICENVPROC) (HPVIDEODEV hVideoDevice);
typedef BOOL (WINAPI * PFNWGLBINDVIDEOIMAGENVPROC) (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOIMAGENVPROC) (HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef BOOL (WINAPI * PFNWGLSENDPBUFFERTOVIDEONVPROC) (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
typedef BOOL (WINAPI * PFNWGLGETVIDEOINFONVPROC) (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
AXLGLWAPI PFNWGLGETVIDEODEVICENVPROC wglGetVideoDeviceNV;
AXLGLWAPI PFNWGLRELEASEVIDEODEVICENVPROC wglReleaseVideoDeviceNV;
AXLGLWAPI PFNWGLBINDVIDEOIMAGENVPROC wglBindVideoImageNV;
AXLGLWAPI PFNWGLRELEASEVIDEOIMAGENVPROC wglReleaseVideoImageNV;
AXLGLWAPI PFNWGLSENDPBUFFERTOVIDEONVPROC wglSendPbufferToVideoNV;
AXLGLWAPI PFNWGLGETVIDEOINFONVPROC wglGetVideoInfoNV;
AXLGLWAPI bool _NV_video_output;

// WGL_OML_sync_control
typedef BOOL (WINAPI * PFNWGLGETSYNCVALUESOMLPROC) (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef BOOL (WINAPI * PFNWGLGETMSCRATEOMLPROC) (HDC hdc, INT32 *numerator, INT32 *denominator);
typedef INT64 (WINAPI * PFNWGLSWAPBUFFERSMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef INT64 (WINAPI * PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef BOOL (WINAPI * PFNWGLWAITFORMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef BOOL (WINAPI * PFNWGLWAITFORSBCOMLPROC) (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);
AXLGLWAPI PFNWGLGETSYNCVALUESOMLPROC wglGetSyncValuesOML;
AXLGLWAPI PFNWGLGETMSCRATEOMLPROC wglGetMscRateOML;
AXLGLWAPI PFNWGLSWAPBUFFERSMSCOMLPROC wglSwapBuffersMscOML;
AXLGLWAPI PFNWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML;
AXLGLWAPI PFNWGLWAITFORMSCOMLPROC wglWaitForMscOML;
AXLGLWAPI PFNWGLWAITFORSBCOMLPROC wglWaitForSbcOML;
AXLGLWAPI bool _OML_sync_control;

enum IError {
    IERR_UNKNOWN = -1,
    IERR_NONE = 0,
    IERR_DUMMY,
    IERR_NO_CONTEXT
};

/**
 * Initializes and loads wgl extension functions.
 * 
 * If use_dummy is set to false, then no dummy context 
 *   will be made current before retriving functions.
 *   However, this might result in initialization failure
 *   if no OpenGL context is currently bound.
 */
AXLGLWAPI IError init(bool use_dummy = true);
// Cleans up dummy resources
AXLGLWAPI void cleanup(void);
// returns true if a certain wgl-extension is supported by the system, false otherwise
AXLGLWAPI bool checkExtension(const char* extension, bool use_dummy = false);

} // axl.glw.wglext
} // axl.glw
} // axl