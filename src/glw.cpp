#include <cstdlib>
#include <cstring>
#include <axl.glw/platform.h>

#if PLATFORM==PLATFORM_WINDOWS || PLATFORM==PLATFORM_LINUX
#if PLATFORM==PLATFORM_WINDOWS
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <axl.glw/glw.hpp>
#include <axl.glw/gl.hpp>
#include <axl.glw/glext.hpp>
#include <axl.glw/gl1.hpp>
#include <axl.glw/gl2.hpp>
#include <axl.glw/gl3.hpp>
#include <axl.glw/gl4.hpp>
#include <axl.glw/Dummy.hpp>
HGLRC GetCurrentContext()
{
	return wglGetCurrentContext();
}
#elif PLATFORM==PLATFORM_LINUX
#include <axl.glw/glw.hpp>
#include <axl.glw/gl.hpp>
#include <axl.glw/glext.hpp>
#include <axl.glw/gl1.hpp>
#include <axl.glw/gl2.hpp>
#include <axl.glw/gl3.hpp>
#include <axl.glw/gl4.hpp>
#include <axl.glw/Dummy.hpp>
#define __gl_h_
using namespace axl::glw::gl;
#include <GL/glx.h>
GLXContext GetCurrentContext()
{
	return glXGetCurrentContext();
}
#endif
#include "glProc.hpp"

namespace axl {
namespace glw {

namespace gl1 {
bool V_1_1 = true;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)0;
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)0;
PFNGLTEXIMAGE3DPROC glTexImage3D = (PFNGLTEXIMAGE3DPROC)0;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)0;
bool V_1_2 = false;
PFNGLACTIVETEXTUREPROC glActiveTexture = (PFNGLACTIVETEXTUREPROC)0;
PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)0;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)0;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)0;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)0;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)0;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)0;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)0;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)0;
PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)0;
PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)0;
PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)0;
PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)0;
PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)0;
PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)0;
PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)0;
PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)0;
PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)0;
PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)0;
PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)0;
PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)0;
PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)0;
PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)0;
PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)0;
PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)0;
PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)0;
PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)0;
PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)0;
PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)0;
PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)0;
PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)0;
PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)0;
PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)0;
PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)0;
PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)0;
PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)0;
PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)0;
PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)0;
PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)0;
PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)0;
PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)0;
PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)0;
PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)0;
PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)0;
PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)0;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)0;
bool V_1_3 = false;
PFNGLBLENDCOLORPROC glBlendColor = (PFNGLBLENDCOLORPROC)0;
PFNGLBLENDEQUATIONPROC glBlendEquation = (PFNGLBLENDEQUATIONPROC)0;
PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)0;
PFNGLFOGCOORDPOINTERPROC glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)0;
PFNGLFOGCOORDDPROC glFogCoordd = (PFNGLFOGCOORDDPROC)0;
PFNGLFOGCOORDDVPROC glFogCoorddv = (PFNGLFOGCOORDDVPROC)0;
PFNGLFOGCOORDFPROC glFogCoordf = (PFNGLFOGCOORDFPROC)0;
PFNGLFOGCOORDFVPROC glFogCoordfv = (PFNGLFOGCOORDFVPROC)0;
PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)0;
PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)0;
PFNGLPOINTPARAMETERFPROC glPointParameterf = (PFNGLPOINTPARAMETERFPROC)0;
PFNGLPOINTPARAMETERFVPROC	 glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)0;
PFNGLPOINTPARAMETERIPROC glPointParameteri = (PFNGLPOINTPARAMETERIPROC)0;
PFNGLPOINTPARAMETERIVPROC glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)0;
PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)0;
PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)0;
PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)0;
PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)0;
PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)0;
PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)0;
PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)0;
PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)0;
PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)0;
PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)0;
PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)0;
PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)0;
PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)0;
PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)0;
PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)0;
PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)0;
PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)0;
PFNGLWINDOWPOS2DPROC glWindowPos2d = (PFNGLWINDOWPOS2DPROC)0;
PFNGLWINDOWPOS2DVPROC glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)0;
PFNGLWINDOWPOS2FPROC glWindowPos2f = (PFNGLWINDOWPOS2FPROC)0;
PFNGLWINDOWPOS2FVPROC glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)0;
PFNGLWINDOWPOS2IPROC glWindowPos2i = (PFNGLWINDOWPOS2IPROC)0;
PFNGLWINDOWPOS2IVPROC glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)0;
PFNGLWINDOWPOS2SPROC glWindowPos2s = (PFNGLWINDOWPOS2SPROC)0;
PFNGLWINDOWPOS2SVPROC glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)0;
PFNGLWINDOWPOS3DPROC glWindowPos3d = (PFNGLWINDOWPOS3DPROC)0;
PFNGLWINDOWPOS3DVPROC glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)0;
PFNGLWINDOWPOS3FPROC glWindowPos3f = (PFNGLWINDOWPOS3FPROC)0;
PFNGLWINDOWPOS3FVPROC glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)0;
PFNGLWINDOWPOS3IPROC glWindowPos3i = (PFNGLWINDOWPOS3IPROC)0;
PFNGLWINDOWPOS3IVPROC glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)0;
PFNGLWINDOWPOS3SPROC glWindowPos3s = (PFNGLWINDOWPOS3SPROC)0;
PFNGLWINDOWPOS3SVPROC glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)0;
bool V_1_4 = false;
PFNGLBEGINQUERYPROC glBeginQuery = (PFNGLBEGINQUERYPROC)0;
PFNGLBINDBUFFERPROC glBindBuffer = (PFNGLBINDBUFFERPROC)0;
PFNGLBUFFERDATAPROC glBufferData = (PFNGLBUFFERDATAPROC)0;
PFNGLBUFFERSUBDATAPROC glBufferSubData = (PFNGLBUFFERSUBDATAPROC)0;
PFNGLDELETEBUFFERSPROC glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)0;
PFNGLDELETEQUERIESPROC glDeleteQueries = (PFNGLDELETEQUERIESPROC)0;
PFNGLENDQUERYPROC glEndQuery = (PFNGLENDQUERYPROC)0;
PFNGLGENBUFFERSPROC glGenBuffers = (PFNGLGENBUFFERSPROC)0;
PFNGLGENQUERIESPROC glGenQueries = (PFNGLGENQUERIESPROC)0;
PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)0;
PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)0;
PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)0;
PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)0;
PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)0;
PFNGLGETQUERYIVPROC glGetQueryiv = (PFNGLGETQUERYIVPROC)0;
PFNGLISBUFFERPROC	glIsBuffer = (PFNGLISBUFFERPROC)0;
PFNGLISQUERYPROC glIsQuery = (PFNGLISQUERYPROC)0;
PFNGLMAPBUFFERPROC glMapBuffer = (PFNGLMAPBUFFERPROC)0;
PFNGLUNMAPBUFFERPROC glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)0;
bool V_1_5 = false;

} // namespace axl.glw.gl1

namespace gl2 {

PFNGLATTACHSHADERPROC glAttachShader = (PFNGLATTACHSHADERPROC)0;
PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)0;
PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)0;
PFNGLCOMPILESHADERPROC glCompileShader = (PFNGLCOMPILESHADERPROC)0;
PFNGLCREATEPROGRAMPROC glCreateProgram = (PFNGLCREATEPROGRAMPROC)0;
PFNGLCREATESHADERPROC glCreateShader = (PFNGLCREATESHADERPROC)0;
PFNGLDELETEPROGRAMPROC glDeleteProgram = (PFNGLDELETEPROGRAMPROC)0;
PFNGLDELETESHADERPROC glDeleteShader = (PFNGLDELETESHADERPROC)0;
PFNGLDETACHSHADERPROC glDetachShader = (PFNGLDETACHSHADERPROC)0;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)0;
PFNGLDRAWBUFFERSPROC glDrawBuffers = (PFNGLDRAWBUFFERSPROC)0;
PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)0;
PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)0;
PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)0;
PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)0;
PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)0;
PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)0;
PFNGLGETPROGRAMIVPROC glGetProgramiv = (PFNGLGETPROGRAMIVPROC)0;
PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)0;
PFNGLGETSHADERSOURCEPROC glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)0;
PFNGLGETSHADERIVPROC glGetShaderiv = (PFNGLGETSHADERIVPROC)0;
PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)0;
PFNGLGETUNIFORMFVPROC glGetUniformfv = (PFNGLGETUNIFORMFVPROC)0;
PFNGLGETUNIFORMIVPROC glGetUniformiv = (PFNGLGETUNIFORMIVPROC)0;
PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)0;
PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)0;
PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)0;
PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)0;
PFNGLISPROGRAMPROC glIsProgram = (PFNGLISPROGRAMPROC)0;
PFNGLISSHADERPROC glIsShader = (PFNGLISSHADERPROC)0;
PFNGLLINKPROGRAMPROC glLinkProgram = (PFNGLLINKPROGRAMPROC)0;
PFNGLSHADERSOURCEPROC glShaderSource = (PFNGLSHADERSOURCEPROC)0;
PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)0;
PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)0;
PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)0;
PFNGLUNIFORM1FPROC glUniform1f = (PFNGLUNIFORM1FPROC)0;
PFNGLUNIFORM1FVPROC glUniform1fv = (PFNGLUNIFORM1FVPROC)0;
PFNGLUNIFORM1IPROC glUniform1i = (PFNGLUNIFORM1IPROC)0;
PFNGLUNIFORM1IVPROC glUniform1iv = (PFNGLUNIFORM1IVPROC)0;
PFNGLUNIFORM2FPROC glUniform2f = (PFNGLUNIFORM2FPROC)0;
PFNGLUNIFORM2FVPROC glUniform2fv = (PFNGLUNIFORM2FVPROC)0;
PFNGLUNIFORM2IPROC glUniform2i = (PFNGLUNIFORM2IPROC)0;
PFNGLUNIFORM2IVPROC glUniform2iv = (PFNGLUNIFORM2IVPROC)0;
PFNGLUNIFORM3FPROC glUniform3f = (PFNGLUNIFORM3FPROC)0;
PFNGLUNIFORM3FVPROC glUniform3fv = (PFNGLUNIFORM3FVPROC)0;
PFNGLUNIFORM3IPROC glUniform3i = (PFNGLUNIFORM3IPROC)0;
PFNGLUNIFORM3IVPROC glUniform3iv = (PFNGLUNIFORM3IVPROC)0;
PFNGLUNIFORM4FPROC glUniform4f = (PFNGLUNIFORM4FPROC)0;
PFNGLUNIFORM4FVPROC glUniform4fv = (PFNGLUNIFORM4FVPROC)0;
PFNGLUNIFORM4IPROC glUniform4i = (PFNGLUNIFORM4IPROC)0;
PFNGLUNIFORM4IVPROC glUniform4iv = (PFNGLUNIFORM4IVPROC)0;
PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)0;
PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)0;
PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)0;
PFNGLUSEPROGRAMPROC glUseProgram = (PFNGLUSEPROGRAMPROC)0;
PFNGLVALIDATEPROGRAMPROC glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)0;
PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)0;
PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)0;
PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)0;
PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)0;
PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)0;
PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)0;
PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)0;
PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)0;
PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)0;
PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)0;
PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)0;
PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)0;
PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)0;
PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)0;
PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)0;
PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)0;
PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)0;
PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)0;
PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)0;
PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)0;
PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)0;
PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)0;
PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)0;
PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)0;
PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)0;
PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)0;
PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)0;
PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)0;
PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)0;
PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)0;
PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)0;
PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)0;
PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)0;
PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)0;
PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)0;
PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)0;
PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)0;
bool V_2_0 = false;
PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)0;
PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)0;
PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)0;
PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)0;
PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)0;
PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)0;
bool V_2_1 = false;

} // namespace axl.glw.gl2

namespace gl3 {

PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)0;
PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)0;
PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)0;
PFNGLCLAMPCOLORPROC glClampColor = (PFNGLCLAMPCOLORPROC)0;
PFNGLCLEARBUFFERFIPROC glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)0;
PFNGLCLEARBUFFERFVPROC glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)0;
PFNGLCLEARBUFFERIVPROC glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)0;
PFNGLCLEARBUFFERUIVPROC glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)0;
PFNGLCOLORMASKIPROC glColorMaski = (PFNGLCOLORMASKIPROC)0;
PFNGLDISABLEIPROC glDisablei = (PFNGLDISABLEIPROC)0;
PFNGLENABLEIPROC glEnablei = (PFNGLENABLEIPROC)0;
PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)0;
PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)0;
PFNGLGETBOOLEANI_VPROC glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)0;
PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)0;
PFNGLGETSTRINGIPROC glGetStringi = (PFNGLGETSTRINGIPROC)0;
PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)0;
PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)0;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)0;
PFNGLGETUNIFORMUIVPROC glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)0;
PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)0;
PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)0;
PFNGLISENABLEDIPROC glIsEnabledi = (PFNGLISENABLEDIPROC)0;
PFNGLTEXPARAMETERIIVPROC glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)0;
PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)0;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)0;
PFNGLUNIFORM1UIPROC glUniform1ui = (PFNGLUNIFORM1UIPROC)0;
PFNGLUNIFORM1UIVPROC glUniform1uiv = (PFNGLUNIFORM1UIVPROC)0;
PFNGLUNIFORM2UIPROC glUniform2ui = (PFNGLUNIFORM2UIPROC)0;
PFNGLUNIFORM2UIVPROC glUniform2uiv = (PFNGLUNIFORM2UIVPROC)0;
PFNGLUNIFORM3UIPROC glUniform3ui = (PFNGLUNIFORM3UIPROC)0;
PFNGLUNIFORM3UIVPROC glUniform3uiv = (PFNGLUNIFORM3UIVPROC)0;
PFNGLUNIFORM4UIPROC glUniform4ui = (PFNGLUNIFORM4UIPROC)0;
PFNGLUNIFORM4UIVPROC glUniform4uiv = (PFNGLUNIFORM4UIVPROC)0;
PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)0;
PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)0;
PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)0;
PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)0;
PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)0;
PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)0;
PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)0;
PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)0;
PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)0;
PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)0;
PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)0;
PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)0;
PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)0;
PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)0;
PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)0;
PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)0;
PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)0;
PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)0;
PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)0;
PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)0;
PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)0;
bool V_3_0 = false;
PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)0;
PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)0;
PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)0;
PFNGLTEXBUFFERPROC glTexBuffer = (PFNGLTEXBUFFERPROC)0;
bool V_3_1 = false;
PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)0;
PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)0;
PFNGLGETINTEGER64I_VPROC glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)0;
bool V_3_2 = false;
PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)0;
bool V_3_3 = false;

} // namespace axl.glw.gl3

namespace gl4 {

PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)0;
PFNGLBLENDEQUATIONIPROC glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)0;
PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)0;
PFNGLBLENDFUNCIPROC glBlendFunci = (PFNGLBLENDFUNCIPROC)0;
PFNGLMINSAMPLESHADINGPROC glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)0;
bool V_4_0 = false;
bool V_4_1 = false;
bool V_4_2 = false;
bool V_4_3 = false;
bool V_4_4 = false;
PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)0;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC)0;
PFNGLGETNTEXIMAGEPROC glGetnTexImage = (PFNGLGETNTEXIMAGEPROC)0;
PFNGLGETNUNIFORMDVPROC glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC)0;
bool V_4_5 = false;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)0;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)0;
PFNGLSPECIALIZESHADERPROC glSpecializeShader = (PFNGLSPECIALIZESHADERPROC)0;
bool V_4_6 = false;

} // namespace axl.glw.gl4

namespace glext {

bool GL_ARB_arrays_of_arrays;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)0;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)0;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)0;
bool GL_ARB_base_instance = false;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)0;
PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)0;
bool GL_ARB_blend_func_extended = false;
PFNGLBUFFERSTORAGEPROC glBufferStorage = (PFNGLBUFFERSTORAGEPROC)0;
bool GL_ARB_buffer_storage = false;
PFNGLCLEARBUFFERDATAPROC glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)0;
PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)0;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)0;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)0;
bool GL_ARB_clear_buffer_object = false;
PFNGLCLEARDEPTHFPROC glClearDepthf = (PFNGLCLEARDEPTHFPROC)0;
PFNGLDEPTHRANGEFPROC glDepthRangef = (PFNGLDEPTHRANGEFPROC)0;
PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)0;
PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)0;
PFNGLSHADERBINARYPROC glShaderBinary = (PFNGLSHADERBINARYPROC)0;
bool GL_ARB_ES2_compatibility = false;
bool GL_ARB_ES3_compatibility = false;
PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)0;
bool GL_ARB_ES3_1_compatibility = false;
PFNGLPRIMITIVEBOUNDINGBOXARBPROC glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC)0;
bool GL_ARB_ES3_2_compatibility = false;
PFNGLCOLORSUBTABLEPROC glColorSubTable = (PFNGLCOLORSUBTABLEPROC)0;
PFNGLCOLORTABLEPROC glColorTable = (PFNGLCOLORTABLEPROC)0;
PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)0;
PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)0;
PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)0;
PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)0;
PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)0;
PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)0;
PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)0;
PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)0;
PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)0;
PFNGLCOPYCOLORTABLEPROC glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)0;
PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)0;
PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)0;
PFNGLGETCOLORTABLEPROC glGetColorTable = (PFNGLGETCOLORTABLEPROC)0;
PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)0;
PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)0;
PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)0;
PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)0;
PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)0;
PFNGLGETHISTOGRAMPROC glGetHistogram = (PFNGLGETHISTOGRAMPROC)0;
PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)0;
PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)0;
PFNGLGETMINMAXPROC glGetMinmax = (PFNGLGETMINMAXPROC)0;
PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)0;
PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)0;
PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)0;
PFNGLHISTOGRAMPROC glHistogram = (PFNGLHISTOGRAMPROC)0;
PFNGLMINMAXPROC glMinmax = (PFNGLMINMAXPROC)0;
PFNGLRESETHISTOGRAMPROC glResetHistogram = (PFNGLRESETHISTOGRAMPROC)0;
PFNGLRESETMINMAXPROC glResetMinmax = (PFNGLRESETMINMAXPROC)0;
PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)0;
bool GL_ARB_imaging = false;
PFNGLCLIENTWAITSYNCPROC glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)0;
PFNGLDELETESYNCPROC glDeleteSync = (PFNGLDELETESYNCPROC)0;
PFNGLFENCESYNCPROC glFenceSync = (PFNGLFENCESYNCPROC)0;
PFNGLGETINTEGER64VPROC glGetInteger64v = (PFNGLGETINTEGER64VPROC)0;
PFNGLGETSYNCIVPROC glGetSynciv = (PFNGLGETSYNCIVPROC)0;
PFNGLISSYNCPROC glIsSync = (PFNGLISSYNCPROC)0;
PFNGLWAITSYNCPROC glWaitSync = (PFNGLWAITSYNCPROC)0;
bool GL_ARB_shadow = false;
bool GL_ARB_sync = false;
PFNGLPATCHPARAMETERFVPROC glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)0;
PFNGLPATCHPARAMETERIPROC glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)0;
bool GL_ARB_tessellation_shader = false;

} // namespace axl.glw.glext

int MAJOR_GL_VERSION = -1;
int MINOR_GL_VERSION = -1;
int NUM_GL_EXTENSIONS = -1;

InitError init(bool use_dummy)
{
	static bool initialized = false;
	if(initialized) return IERR_NONE;
	using namespace gl1;
	using namespace gl2;
	using namespace gl3;
	using namespace gl4;
	if(use_dummy && (Dummy::IERR_NONE != GlobalDummy.init() || false == GlobalDummy.makeCurrent())) return IERR_DUMMY;
	if(!GetCurrentContext()) return IERR_NO_CONTEXT;
	const char* gl_version = (const char*)glGetString(GL_VERSION);
	int major = (int)std::atof(gl_version);
	int minor = (int)std::atof(gl_version[1] == '.' ? &gl_version[2] : gl_version[2] == '.' ? &gl_version[3] : &gl_version[4]);
	MAJOR_GL_VERSION = major;
	MINOR_GL_VERSION = minor;
	if(NUM_GL_EXTENSIONS < 0) 
	{
		GLint num_ext = 0;
		if(MAJOR_GL_VERSION >= 3)
		{
			glGetIntegerv(NUM_GL_EXTENSIONS, &num_ext);
		}
		else
		{
			const char* ext = (const char*)glGetString(GL_EXTENSIONS);
			if(ext)
			{
				int exit_loop = 0, empty = 1;
				for(int i=0; i<0xffffff; ++i)
				{
					switch(ext[i])
					{
						case '\0':
							exit_loop = 1;
							if(!empty) ++num_ext;
							break;
						case ' ':
							++num_ext;
							break;
						default:
							if(empty) empty = 0;
							continue;
					}
					if(exit_loop) break;
				}
			}
		}
		NUM_GL_EXTENSIONS = num_ext;
	}
	// GL_VERSION_1_2
	if(major > 1 || (major == 1 && minor >= 2))
	{
		V_1_2 = true;
		glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)GetGLProcAddress("glCopyTexSubImage3D");
		glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)GetGLProcAddress("glDrawRangeElements");
		glTexImage3D = (PFNGLTEXIMAGE3DPROC)GetGLProcAddress("glTexImage3D");
		glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)GetGLProcAddress("glTexSubImage3D");

	}
	// GL_VERSION_1_3
	if(major > 1 || (major == 1 && minor >= 3))
	{
		V_1_3 = true;
		glActiveTexture = (PFNGLACTIVETEXTUREPROC)GetGLProcAddress("glActiveTexture");
		glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)GetGLProcAddress("glClientActiveTexture");
		glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GetGLProcAddress("glCompressedTexImage1D");
		glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GetGLProcAddress("glCompressedTexImage2D");
		glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GetGLProcAddress("glCompressedTexImage3D");
		glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GetGLProcAddress("glCompressedTexSubImage1D");
		glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GetGLProcAddress("glCompressedTexSubImage2D");
		glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GetGLProcAddress("glCompressedTexSubImage3D");
		glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GetGLProcAddress("glGetCompressedTexImage");
		glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)GetGLProcAddress("glLoadTransposeMatrixd");
		glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)GetGLProcAddress("glLoadTransposeMatrixf");
		glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)GetGLProcAddress("glMultTransposeMatrixd");
		glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)GetGLProcAddress("glMultTransposeMatrixf");
		glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)GetGLProcAddress("glMultiTexCoord1d");
		glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)GetGLProcAddress("glMultiTexCoord1dv");
		glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)GetGLProcAddress("glMultiTexCoord1f");
		glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)GetGLProcAddress("glMultiTexCoord1fv");
		glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)GetGLProcAddress("glMultiTexCoord1i");
		glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)GetGLProcAddress("glMultiTexCoord1iv");
		glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)GetGLProcAddress("glMultiTexCoord1s");
		glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)GetGLProcAddress("glMultiTexCoord1sv");
		glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)GetGLProcAddress("glMultiTexCoord2d");
		glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)GetGLProcAddress("glMultiTexCoord2dv");
		glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)GetGLProcAddress("glMultiTexCoord2f");
		glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)GetGLProcAddress("glMultiTexCoord2fv");
		glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)GetGLProcAddress("glMultiTexCoord2i");
		glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)GetGLProcAddress("glMultiTexCoord2iv");
		glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)GetGLProcAddress("glMultiTexCoord2s");
		glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)GetGLProcAddress("glMultiTexCoord2sv");
		glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)GetGLProcAddress("glMultiTexCoord3d");
		glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)GetGLProcAddress("glMultiTexCoord3dv");
		glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)GetGLProcAddress("glMultiTexCoord3f");
		glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)GetGLProcAddress("glMultiTexCoord3fv");
		glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)GetGLProcAddress("glMultiTexCoord3i");
		glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)GetGLProcAddress("glMultiTexCoord3iv");
		glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)GetGLProcAddress("glMultiTexCoord3s");
		glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)GetGLProcAddress("glMultiTexCoord3sv");
		glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)GetGLProcAddress("glMultiTexCoord4d");
		glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)GetGLProcAddress("glMultiTexCoord4dv");
		glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)GetGLProcAddress("glMultiTexCoord4f");
		glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)GetGLProcAddress("glMultiTexCoord4fv");
		glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)GetGLProcAddress("glMultiTexCoord4i");
		glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)GetGLProcAddress("glMultiTexCoord4iv");
		glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)GetGLProcAddress("glMultiTexCoord4s");
		glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)GetGLProcAddress("glMultiTexCoord4sv");
		glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)GetGLProcAddress("glSampleCoverage");
	}
	// GL_VERSION_1_4
	if(major > 1 || (major == 1 && minor >= 4))
	{
		V_1_4 = true;
		glBlendColor = (PFNGLBLENDCOLORPROC)GetGLProcAddress("glBlendColor");
		glBlendEquation = (PFNGLBLENDEQUATIONPROC)GetGLProcAddress("glBlendEquation");
		glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)GetGLProcAddress("glBlendFuncSeparate");
		glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)GetGLProcAddress("glFogCoordPointer");
		glFogCoordd = (PFNGLFOGCOORDDPROC)GetGLProcAddress("glFogCoordd");
		glFogCoorddv = (PFNGLFOGCOORDDVPROC)GetGLProcAddress("glFogCoorddv");
		glFogCoordf = (PFNGLFOGCOORDFPROC)GetGLProcAddress("glFogCoordf");
		glFogCoordfv = (PFNGLFOGCOORDFVPROC)GetGLProcAddress("glFogCoordfv");
		glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)GetGLProcAddress("glMultiDrawArrays");
		glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)GetGLProcAddress("glMultiDrawElements");
		glPointParameterf = (PFNGLPOINTPARAMETERFPROC)GetGLProcAddress("glPointParameterf");
		glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)GetGLProcAddress("glPointParameterfv");
		glPointParameteri = (PFNGLPOINTPARAMETERIPROC)GetGLProcAddress("glPointParameteri");
		glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)GetGLProcAddress("glPointParameteriv");
		glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)GetGLProcAddress("glSecondaryColor3b");
		glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)GetGLProcAddress("glSecondaryColor3bv");
		glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)GetGLProcAddress("glSecondaryColor3d");
		glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)GetGLProcAddress("glSecondaryColor3dv");
		glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)GetGLProcAddress("glSecondaryColor3f");
		glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)GetGLProcAddress("glSecondaryColor3fv");
		glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)GetGLProcAddress("glSecondaryColor3i");
		glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)GetGLProcAddress("glSecondaryColor3iv");
		glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)GetGLProcAddress("glSecondaryColor3s");
		glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)GetGLProcAddress("glSecondaryColor3sv");
		glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)GetGLProcAddress("glSecondaryColor3ub");
		glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)GetGLProcAddress("glSecondaryColor3ubv");
		glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)GetGLProcAddress("glSecondaryColor3ui");
		glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)GetGLProcAddress("glSecondaryColor3uiv");
		glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)GetGLProcAddress("glSecondaryColor3us");
		glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)GetGLProcAddress("glSecondaryColor3usv");
		glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)GetGLProcAddress("glSecondaryColorPointer");
		glWindowPos2d = (PFNGLWINDOWPOS2DPROC)GetGLProcAddress("glWindowPos2d");
		glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)GetGLProcAddress("glWindowPos2dv");
		glWindowPos2f = (PFNGLWINDOWPOS2FPROC)GetGLProcAddress("glWindowPos2f");
		glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)GetGLProcAddress("glWindowPos2fv");
		glWindowPos2i = (PFNGLWINDOWPOS2IPROC)GetGLProcAddress("glWindowPos2i");
		glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)GetGLProcAddress("glWindowPos2iv");
		glWindowPos2s = (PFNGLWINDOWPOS2SPROC)GetGLProcAddress("glWindowPos2s");
		glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)GetGLProcAddress("glWindowPos2sv");
		glWindowPos3d = (PFNGLWINDOWPOS3DPROC)GetGLProcAddress("glWindowPos3d");
		glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)GetGLProcAddress("glWindowPos3dv");
		glWindowPos3f = (PFNGLWINDOWPOS3FPROC)GetGLProcAddress("glWindowPos3f");
		glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)GetGLProcAddress("glWindowPos3fv");
		glWindowPos3i = (PFNGLWINDOWPOS3IPROC)GetGLProcAddress("glWindowPos3i");
		glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)GetGLProcAddress("glWindowPos3iv");
		glWindowPos3s = (PFNGLWINDOWPOS3SPROC)GetGLProcAddress("glWindowPos3s");
		glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)GetGLProcAddress("glWindowPos3sv");
	}
	// GL_VERSION_1_5
	if(major > 1 || (major == 1 && minor >= 5))
	{
		V_1_5 = true;
		glBeginQuery = (PFNGLBEGINQUERYPROC)GetGLProcAddress("glBeginQuery");
		glBindBuffer = (PFNGLBINDBUFFERPROC)GetGLProcAddress("glBindBuffer");
		glBufferData = (PFNGLBUFFERDATAPROC)GetGLProcAddress("glBufferData");
		glBufferSubData = (PFNGLBUFFERSUBDATAPROC)GetGLProcAddress("glBufferSubData");
		glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)GetGLProcAddress("glDeleteBuffers");
		glDeleteQueries = (PFNGLDELETEQUERIESPROC)GetGLProcAddress("glDeleteQueries");
		glEndQuery = (PFNGLENDQUERYPROC)GetGLProcAddress("glEndQuery");
		glGenBuffers = (PFNGLGENBUFFERSPROC)GetGLProcAddress("glGenBuffers");
		glGenQueries = (PFNGLGENQUERIESPROC)GetGLProcAddress("glGenQueries");
		glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)GetGLProcAddress("glGetBufferParameteriv");
		glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)GetGLProcAddress("glGetBufferPointerv");
		glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)GetGLProcAddress("glGetBufferSubData");
		glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)GetGLProcAddress("glGetQueryObjectiv");
		glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)GetGLProcAddress("glGetQueryObjectuiv");
		glGetQueryiv = (PFNGLGETQUERYIVPROC)GetGLProcAddress("glGetQueryiv");
		glIsBuffer = (PFNGLISBUFFERPROC)GetGLProcAddress("glIsBuffer");
		glIsQuery = (PFNGLISQUERYPROC)GetGLProcAddress("glIsQuery");
		glMapBuffer = (PFNGLMAPBUFFERPROC)GetGLProcAddress("glMapBuffer");
		glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)GetGLProcAddress("glUnmapBuffer");
	}
	// GL_VERSION_2_0
	if(major > 2 || (major == 2 && minor >= 0))
	{
		V_2_0 = true;
		glAttachShader = (PFNGLATTACHSHADERPROC)GetGLProcAddress("glAttachShader");
		glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)GetGLProcAddress("glBindAttribLocation");
		glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)GetGLProcAddress("glBlendEquationSeparate");
		glCompileShader = (PFNGLCOMPILESHADERPROC)GetGLProcAddress("glCompileShader");
		glCreateProgram = (PFNGLCREATEPROGRAMPROC)GetGLProcAddress("glCreateProgram");
		glCreateShader = (PFNGLCREATESHADERPROC)GetGLProcAddress("glCreateShader");
		glDeleteProgram = (PFNGLDELETEPROGRAMPROC)GetGLProcAddress("glDeleteProgram");
		glDeleteShader = (PFNGLDELETESHADERPROC)GetGLProcAddress("glDeleteShader");
		glDetachShader = (PFNGLDETACHSHADERPROC)GetGLProcAddress("glDetachShader");
		glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)GetGLProcAddress("glDisableVertexAttribArray");
		glDrawBuffers = (PFNGLDRAWBUFFERSPROC)GetGLProcAddress("glDrawBuffers");
		glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)GetGLProcAddress("glEnableVertexAttribArray");
		glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)GetGLProcAddress("glGetActiveAttrib");
		glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)GetGLProcAddress("glGetActiveUniform");
		glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)GetGLProcAddress("glGetAttachedShaders");
		glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)GetGLProcAddress("glGetAttribLocation");
		glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)GetGLProcAddress("glGetProgramInfoLog");
		glGetProgramiv = (PFNGLGETPROGRAMIVPROC)GetGLProcAddress("glGetProgramiv");
		glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)GetGLProcAddress("glGetShaderInfoLog");
		glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)GetGLProcAddress("glGetShaderSource");
		glGetShaderiv = (PFNGLGETSHADERIVPROC)GetGLProcAddress("glGetShaderiv");
		glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)GetGLProcAddress("glGetUniformLocation");
		glGetUniformfv = (PFNGLGETUNIFORMFVPROC)GetGLProcAddress("glGetUniformfv");
		glGetUniformiv = (PFNGLGETUNIFORMIVPROC)GetGLProcAddress("glGetUniformiv");
		glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)GetGLProcAddress("glGetVertexAttribPointerv");
		glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)GetGLProcAddress("glGetVertexAttribdv");
		glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)GetGLProcAddress("glGetVertexAttribfv");
		glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)GetGLProcAddress("glGetVertexAttribiv");
		glIsProgram = (PFNGLISPROGRAMPROC)GetGLProcAddress("glIsProgram");
		glIsShader = (PFNGLISSHADERPROC)GetGLProcAddress("glIsShader");
		glLinkProgram = (PFNGLLINKPROGRAMPROC)GetGLProcAddress("glLinkProgram");
		glShaderSource = (PFNGLSHADERSOURCEPROC)GetGLProcAddress("glShaderSource");
		glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)GetGLProcAddress("glStencilFuncSeparate");
		glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)GetGLProcAddress("glStencilMaskSeparate");
		glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)GetGLProcAddress("glStencilOpSeparate");
		glUniform1f = (PFNGLUNIFORM1FPROC)GetGLProcAddress("glUniform1f");
		glUniform1fv = (PFNGLUNIFORM1FVPROC)GetGLProcAddress("glUniform1fv");
		glUniform1i = (PFNGLUNIFORM1IPROC)GetGLProcAddress("glUniform1i");
		glUniform1iv = (PFNGLUNIFORM1IVPROC)GetGLProcAddress("glUniform1iv");
		glUniform2f = (PFNGLUNIFORM2FPROC)GetGLProcAddress("glUniform2f");
		glUniform2fv = (PFNGLUNIFORM2FVPROC)GetGLProcAddress("glUniform2fv");
		glUniform2i = (PFNGLUNIFORM2IPROC)GetGLProcAddress("glUniform2i");
		glUniform2iv = (PFNGLUNIFORM2IVPROC)GetGLProcAddress("glUniform2iv");
		glUniform3f = (PFNGLUNIFORM3FPROC)GetGLProcAddress("glUniform3f");
		glUniform3fv = (PFNGLUNIFORM3FVPROC)GetGLProcAddress("glUniform3fv");
		glUniform3i = (PFNGLUNIFORM3IPROC)GetGLProcAddress("glUniform3i");
		glUniform3iv = (PFNGLUNIFORM3IVPROC)GetGLProcAddress("glUniform3iv");
		glUniform4f = (PFNGLUNIFORM4FPROC)GetGLProcAddress("glUniform4f");
		glUniform4fv = (PFNGLUNIFORM4FVPROC)GetGLProcAddress("glUniform4fv");
		glUniform4i = (PFNGLUNIFORM4IPROC)GetGLProcAddress("glUniform4i");
		glUniform4iv = (PFNGLUNIFORM4IVPROC)GetGLProcAddress("glUniform4iv");
		glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)GetGLProcAddress("glUniformMatrix2fv");
		glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)GetGLProcAddress("glUniformMatrix3fv");
		glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)GetGLProcAddress("glUniformMatrix4fv");
		glUseProgram = (PFNGLUSEPROGRAMPROC)GetGLProcAddress("glUseProgram");
		glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)GetGLProcAddress("glValidateProgram");
		glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)GetGLProcAddress("glVertexAttrib1d");
		glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)GetGLProcAddress("glVertexAttrib1dv");
		glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)GetGLProcAddress("glVertexAttrib1f");
		glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)GetGLProcAddress("glVertexAttrib1fv");
		glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)GetGLProcAddress("glVertexAttrib1s");
		glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)GetGLProcAddress("glVertexAttrib1sv");
		glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)GetGLProcAddress("glVertexAttrib2d");
		glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)GetGLProcAddress("glVertexAttrib2dv");
		glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)GetGLProcAddress("glVertexAttrib2f");
		glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)GetGLProcAddress("glVertexAttrib2fv");
		glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)GetGLProcAddress("glVertexAttrib2s");
		glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)GetGLProcAddress("glVertexAttrib2sv");
		glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)GetGLProcAddress("glVertexAttrib3d");
		glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)GetGLProcAddress("glVertexAttrib3dv");
		glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)GetGLProcAddress("glVertexAttrib3f");
		glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)GetGLProcAddress("glVertexAttrib3fv");
		glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)GetGLProcAddress("glVertexAttrib3s");
		glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)GetGLProcAddress("glVertexAttrib3sv");
		glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)GetGLProcAddress("glVertexAttrib4Nbv");
		glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)GetGLProcAddress("glVertexAttrib4Niv");
		glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)GetGLProcAddress("glVertexAttrib4Nsv");
		glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)GetGLProcAddress("glVertexAttrib4Nub");
		glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)GetGLProcAddress("glVertexAttrib4Nubv");
		glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)GetGLProcAddress("glVertexAttrib4Nuiv");
		glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)GetGLProcAddress("glVertexAttrib4Nusv");
		glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)GetGLProcAddress("glVertexAttrib4bv");
		glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)GetGLProcAddress("glVertexAttrib4d");
		glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)GetGLProcAddress("glVertexAttrib4dv");
		glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)GetGLProcAddress("glVertexAttrib4f");
		glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)GetGLProcAddress("glVertexAttrib4fv");
		glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)GetGLProcAddress("glVertexAttrib4iv");
		glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)GetGLProcAddress("glVertexAttrib4s");
		glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)GetGLProcAddress("glVertexAttrib4sv");
		glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)GetGLProcAddress("glVertexAttrib4ubv");
		glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)GetGLProcAddress("glVertexAttrib4uiv");
		glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)GetGLProcAddress("glVertexAttrib4usv");
		glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)GetGLProcAddress("glVertexAttribPointer");
	}
	// GL_VERSION_2_1
	if(major > 2 || (major == 2 && minor >= 1))
	{
		V_2_1 = true;
		glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)GetGLProcAddress("glUniformMatrix2x3fv");
		glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)GetGLProcAddress("glUniformMatrix2x4fv");
		glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)GetGLProcAddress("glUniformMatrix3x2fv");
		glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)GetGLProcAddress("glUniformMatrix3x4fv");
		glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)GetGLProcAddress("glUniformMatrix4x2fv");
		glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)GetGLProcAddress("glUniformMatrix4x3fv");
	}
	// GL_VERSION_3_0
	if(major > 3 || (major == 3 && minor >= 0))
	{
		V_3_0 = true;
		glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)GetGLProcAddress("glBeginConditionalRender");
		glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)GetGLProcAddress("glBeginTransformFeedback");
		glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)GetGLProcAddress("glBindFragDataLocation");
		glClampColor = (PFNGLCLAMPCOLORPROC)GetGLProcAddress("glClampColor");
		glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)GetGLProcAddress("glClearBufferfi");
		glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)GetGLProcAddress("glClearBufferfv");
		glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)GetGLProcAddress("glClearBufferiv");
		glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)GetGLProcAddress("glClearBufferuiv");
		glColorMaski = (PFNGLCOLORMASKIPROC)GetGLProcAddress("glColorMaski");
		glDisablei = (PFNGLDISABLEIPROC)GetGLProcAddress("glDisablei");
		glEnablei = (PFNGLENABLEIPROC)GetGLProcAddress("glEnablei");
		glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)GetGLProcAddress("glEndConditionalRender");
		glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)GetGLProcAddress("glEndTransformFeedback");
		glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)GetGLProcAddress("glGetBooleani_v");
		glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)GetGLProcAddress("glGetFragDataLocation");
		glGetStringi = (PFNGLGETSTRINGIPROC)GetGLProcAddress("glGetStringi");
		glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)GetGLProcAddress("glGetTexParameterIiv");
		glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)GetGLProcAddress("glGetTexParameterIuiv");
		glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)GetGLProcAddress("glGetTransformFeedbackVarying");
		glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)GetGLProcAddress("glGetUniformuiv");
		glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)GetGLProcAddress("glGetVertexAttribIiv");
		glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)GetGLProcAddress("glGetVertexAttribIuiv");
		glIsEnabledi = (PFNGLISENABLEDIPROC)GetGLProcAddress("glIsEnabledi");
		glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)GetGLProcAddress("glTexParameterIiv");
		glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)GetGLProcAddress("glTexParameterIuiv");
		glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)GetGLProcAddress("glTransformFeedbackVaryings");
		glUniform1ui = (PFNGLUNIFORM1UIPROC)GetGLProcAddress("glUniform1ui");
		glUniform1uiv = (PFNGLUNIFORM1UIVPROC)GetGLProcAddress("glUniform1uiv");
		glUniform2ui = (PFNGLUNIFORM2UIPROC)GetGLProcAddress("glUniform2ui");
		glUniform2uiv = (PFNGLUNIFORM2UIVPROC)GetGLProcAddress("glUniform2uiv");
		glUniform3ui = (PFNGLUNIFORM3UIPROC)GetGLProcAddress("glUniform3ui");
		glUniform3uiv = (PFNGLUNIFORM3UIVPROC)GetGLProcAddress("glUniform3uiv");
		glUniform4ui = (PFNGLUNIFORM4UIPROC)GetGLProcAddress("glUniform4ui");
		glUniform4uiv = (PFNGLUNIFORM4UIVPROC)GetGLProcAddress("glUniform4uiv");
		glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)GetGLProcAddress("glVertexAttribI1i");
		glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)GetGLProcAddress("glVertexAttribI1iv");
		glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)GetGLProcAddress("glVertexAttribI1ui");
		glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)GetGLProcAddress("glVertexAttribI1uiv");
		glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)GetGLProcAddress("glVertexAttribI2i");
		glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)GetGLProcAddress("glVertexAttribI2iv");
		glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)GetGLProcAddress("glVertexAttribI2ui");
		glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)GetGLProcAddress("glVertexAttribI2uiv");
		glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)GetGLProcAddress("glVertexAttribI3i");
		glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)GetGLProcAddress("glVertexAttribI3iv");
		glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)GetGLProcAddress("glVertexAttribI3ui");
		glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)GetGLProcAddress("glVertexAttribI3uiv");
		glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)GetGLProcAddress("glVertexAttribI4bv");
		glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)GetGLProcAddress("glVertexAttribI4i");
		glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)GetGLProcAddress("glVertexAttribI4iv");
		glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)GetGLProcAddress("glVertexAttribI4sv");
		glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)GetGLProcAddress("glVertexAttribI4ubv");
		glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)GetGLProcAddress("glVertexAttribI4ui");
		glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)GetGLProcAddress("glVertexAttribI4uiv");
		glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)GetGLProcAddress("glVertexAttribI4usv");
		glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)GetGLProcAddress("glVertexAttribIPointer");
	}
	// GL_VERSION_3_1
	if(major > 3 || (major == 3 && minor >= 1))
	{
		V_3_1 = true;
		glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)GetGLProcAddress("glDrawArraysInstanced");
		glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)GetGLProcAddress("glDrawElementsInstanced");
		glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)GetGLProcAddress("glPrimitiveRestartIndex");
		glTexBuffer = (PFNGLTEXBUFFERPROC)GetGLProcAddress("glTexBuffer");
	}
	// GL_VERSION_3_2
	if(major > 3 || (major == 3 && minor >= 2))
	{
		V_3_2 = true;
		glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)GetGLProcAddress("glFramebufferTexture");
		glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)GetGLProcAddress("glGetBufferParameteri64v");
		glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)GetGLProcAddress("glGetInteger64i_v");
	}
	// GL_VERSION_3_3
	if(major > 3 || (major == 3 && minor >= 3))
	{
		V_3_3 = true;
		glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)GetGLProcAddress("glVertexAttribDivisor");
	}
	// GL_VERSION_4_0
	if(major > 4 || (major == 4 && minor >= 0))
	{
		V_4_0 = true;
		glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)GetGLProcAddress("glBlendEquationSeparatei");
		glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)GetGLProcAddress("glBlendEquationi");
		glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)GetGLProcAddress("glBlendFuncSeparatei");
		glBlendFunci = (PFNGLBLENDFUNCIPROC)GetGLProcAddress("glBlendFunci");
		glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)GetGLProcAddress("glMinSampleShading");
	}
	// GL_VERSION_4_1
	if(major > 4 || (major == 4 && minor >= 1))
		V_4_1 = true;
	// GL_VERSION_4_2
	if(major > 4 || (major == 4 && minor >= 2))
		V_4_2 = true;
	// GL_VERSION_4_3
	if(major > 4 || (major == 4 && minor >= 3))
		V_4_3 = true;
	// GL_VERSION_4_4
	if(major > 4 || (major == 4 && minor >= 4))
		V_4_4 = true;
	// GL_VERSION_4_5
	if(major > 4 || (major == 4 && minor >= 5))
	{
		V_4_5 = true;
		glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)GetGLProcAddress("glGetGraphicsResetStatus");
		glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC)GetGLProcAddress("glGetnCompressedTexImage");
		glGetnTexImage = (PFNGLGETNTEXIMAGEPROC)GetGLProcAddress("glGetnTexImage");
		glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC)GetGLProcAddress("glGetnUniformdv");
	}
	// GL_VERSION_4_6
	if(major > 4 || (major == 4 && minor >= 6))
	{
		V_4_6 = true;
		glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)GetGLProcAddress("glMultiDrawArraysIndirectCount");
		glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)GetGLProcAddress("glMultiDrawElementsIndirectCount");
		glSpecializeShader = (PFNGLSPECIALIZESHADERPROC)GetGLProcAddress("glSpecializeShader");
	}
	// glext
	if(axl::glw::checkExtension("GL_ARB_arrays_of_arrays"))
	{
		GL_ARB_arrays_of_arrays = true;
	}
	if(axl::glw::checkExtension("GL_ARB_base_instance"))
	{
		glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)GetGLProcAddress("glDrawArraysInstancedBaseInstance");
		glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)GetGLProcAddress("glDrawElementsInstancedBaseInstance");
		glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)GetGLProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
		if(glDrawArraysInstancedBaseInstance && glDrawElementsInstancedBaseInstance && glDrawElementsInstancedBaseVertexBaseInstance) GL_ARB_base_instance = true;
		GL_ARB_base_instance = false;
	}
	if(axl::glw::checkExtension("GL_ARB_blend_func_extended"))
	{	
		glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)GetGLProcAddress("glBindFragDataLocationIndexed");
		glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)GetGLProcAddress("glGetFragDataIndex");
		if(glBindFragDataLocationIndexed && glGetFragDataIndex) GL_ARB_blend_func_extended = true;
		else GL_ARB_blend_func_extended = false;
	}
	if(axl::glw::checkExtension("GL_ARB_buffer_storage"))
	{	
		glBufferStorage = (PFNGLBUFFERSTORAGEPROC)GetGLProcAddress("glBufferStorage");
		if(glBufferStorage) GL_ARB_buffer_storage = true;
		else GL_ARB_buffer_storage = false;
	}
	if(axl::glw::checkExtension("GL_ARB_clear_buffer_object"))
	{	
		glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)GetGLProcAddress("glClearBufferData");
		glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)GetGLProcAddress("glClearBufferSubData");
		glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)GetGLProcAddress("glClearNamedBufferDataEXT");
		glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)GetGLProcAddress("glClearNamedBufferSubDataEXT");
		if(glClearBufferData && glClearBufferSubData && glClearNamedBufferDataEXT && glClearNamedBufferSubDataEXT) GL_ARB_clear_buffer_object = true;
		else GL_ARB_clear_buffer_object = false;
	}
	if(axl::glw::checkExtension("GL_ARB_ES2_compatibility"))
	{	
		glClearDepthf = (PFNGLCLEARDEPTHFPROC)GetGLProcAddress("glClearDepthf");
		glDepthRangef = (PFNGLDEPTHRANGEFPROC)GetGLProcAddress("glDepthRangef");
		glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)GetGLProcAddress("glGetShaderPrecisionFormat");
		glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)GetGLProcAddress("glReleaseShaderCompiler");
		glShaderBinary = (PFNGLSHADERBINARYPROC)GetGLProcAddress("glShaderBinary");
		if( glClearDepthf && glDepthRangef && glGetShaderPrecisionFormat && glReleaseShaderCompiler && glShaderBinary) GL_ARB_ES2_compatibility = true;
		else GL_ARB_ES2_compatibility = false;
	}
	if(axl::glw::checkExtension("GL_ARB_ES3_compatibility"))
	{	
		GL_ARB_ES3_compatibility = true;
	}
	if(axl::glw::checkExtension("GL_ARB_ES3_1_compatibility"))
	{	
		glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)GetGLProcAddress("glMemoryBarrierByRegion");
		if(glMemoryBarrierByRegion) GL_ARB_ES3_1_compatibility = true;
		GL_ARB_ES3_1_compatibility = false;
	}
	if(axl::glw::checkExtension("GL_ARB_ES3_2_compatibility"))
	{	
		glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC)GetGLProcAddress("glPrimitiveBoundingBoxARB");
		if(glPrimitiveBoundingBoxARB) GL_ARB_ES3_2_compatibility = true;
		else GL_ARB_ES3_2_compatibility = false;
	}
	if(axl::glw::checkExtension("GL_ARB_imaging"))
	{	
		glColorSubTable = (PFNGLCOLORSUBTABLEPROC)GetGLProcAddress("glColorSubTable");
		glColorTable = (PFNGLCOLORTABLEPROC)GetGLProcAddress("glColorTable");
		glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)GetGLProcAddress("glColorTableParameterfv");
		glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)GetGLProcAddress("glColorTableParameteriv");
		glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)GetGLProcAddress("glConvolutionFilter1D");
		glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)GetGLProcAddress("glConvolutionFilter2D");
		glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)GetGLProcAddress("glConvolutionParameterf");
		glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)GetGLProcAddress("glConvolutionParameterfv");
		glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)GetGLProcAddress("glConvolutionParameteri");
		glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)GetGLProcAddress("glConvolutionParameteriv");
		glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)GetGLProcAddress("glCopyColorSubTable");
		glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)GetGLProcAddress("glCopyColorTable");
		glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GetGLProcAddress("glCopyConvolutionFilter1D");
		glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GetGLProcAddress("glCopyConvolutionFilter2D");
		glGetColorTable = (PFNGLGETCOLORTABLEPROC)GetGLProcAddress("glGetColorTable");
		glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GetGLProcAddress("glGetColorTableParameterfv");
		glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GetGLProcAddress("glGetColorTableParameteriv");
		glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)GetGLProcAddress("glGetConvolutionFilter");
		glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GetGLProcAddress("glGetConvolutionParameterfv");
		glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GetGLProcAddress("glGetConvolutionParameteriv");
		glGetHistogram = (PFNGLGETHISTOGRAMPROC)GetGLProcAddress("glGetHistogram");
		glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GetGLProcAddress("glGetHistogramParameterfv");
		glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GetGLProcAddress("glGetHistogramParameteriv");
		glGetMinmax = (PFNGLGETMINMAXPROC)GetGLProcAddress("glGetMinmax");
		glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)GetGLProcAddress("glGetMinmaxParameterfv");
		glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)GetGLProcAddress("glGetMinmaxParameteriv");
		glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)GetGLProcAddress("glGetSeparableFilter");
		glHistogram = (PFNGLHISTOGRAMPROC)GetGLProcAddress("glHistogram");
		glMinmax = (PFNGLMINMAXPROC)GetGLProcAddress("glMinmax");
		glResetHistogram = (PFNGLRESETHISTOGRAMPROC)GetGLProcAddress("glResetHistogram");
		glResetMinmax = (PFNGLRESETMINMAXPROC)GetGLProcAddress("glResetMinmax");
		glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)GetGLProcAddress("glSeparableFilter2D");
		if(glColorSubTable && glColorTable && glColorTableParameterfv && glColorTableParameteriv && glConvolutionFilter1D && glConvolutionFilter2D && glConvolutionParameterf && glConvolutionParameterfv && glConvolutionParameteri && glConvolutionParameteriv && glCopyColorSubTable && glCopyColorTable && glCopyConvolutionFilter1D && glCopyConvolutionFilter2D && glGetColorTable && glGetColorTableParameterfv && glGetColorTableParameteriv && glGetConvolutionFilter && glGetConvolutionParameterfv && glGetConvolutionParameteriv && glGetHistogram && glGetHistogramParameterfv && glGetHistogramParameteriv && glGetMinmax && glGetMinmaxParameterfv && glGetMinmaxParameteriv && glGetSeparableFilter && glHistogram && glMinmax && glResetHistogram && glResetMinmax && glSeparableFilter2D) GL_ARB_imaging = true;
		else GL_ARB_imaging = false;
	}
	if(axl::glw::checkExtension("GL_ARB_shadow"))
	{
		GL_ARB_shadow = true;
	}
	if(axl::glw::checkExtension("GL_ARB_sync"))
	{	
		glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)GetGLProcAddress("glClientWaitSync");
		glDeleteSync = (PFNGLDELETESYNCPROC)GetGLProcAddress("glDeleteSync");
		glFenceSync = (PFNGLFENCESYNCPROC)GetGLProcAddress("glFenceSync");
		glGetInteger64v = (PFNGLGETINTEGER64VPROC)GetGLProcAddress("glGetInteger64v");
		glGetSynciv = (PFNGLGETSYNCIVPROC)GetGLProcAddress("glGetSynciv");
		glIsSync = (PFNGLISSYNCPROC)GetGLProcAddress("glIsSync");
		glWaitSync = (PFNGLWAITSYNCPROC)GetGLProcAddress("glWaitSync");
		if(glClientWaitSync && glDeleteSync && glFenceSync && glGetInteger64v && glGetSynciv && glIsSync && glWaitSync) GL_ARB_sync = true;
		else GL_ARB_sync = false;
	}
	if(axl::glw::checkExtension("GL_ARB_tessellation_shader"))
	{	
		glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)GetGLProcAddress("glPatchParameterfv");
		glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)GetGLProcAddress("glPatchParameteri");
		if(glPatchParameterfv && glPatchParameteri) GL_ARB_tessellation_shader = true;
		else GL_ARB_tessellation_shader = true;
	}
	initialized = true;
	return IERR_NONE;
}

void cleanup()
{
	GlobalDummy.destroy();
	glw::MAJOR_GL_VERSION = -1;
	glw::MINOR_GL_VERSION = -1;
	glw::NUM_GL_EXTENSIONS = -1;
}

bool checkExtension(const char* extension, bool use_dummy)
{
	using namespace gl;
	using namespace gl3;
	if(!extension) return false;
	const int ext_len = (int)std::strlen(extension);
	if(ext_len <= 0) return false;
	if(use_dummy) 
	{
		if(Dummy::IERR_NONE != GlobalDummy.init() || false == GlobalDummy.makeCurrent()) return false;
		if(!GetCurrentContext()) return false;
	}
	if(glw::MAJOR_GL_VERSION >= 3)
	{
		if(glw::NUM_GL_EXTENSIONS <= 0) 
		{
			GLint num_ext;
			glGetIntegerv(GL_NUM_EXTENSIONS, &num_ext);
			glw::NUM_GL_EXTENSIONS = num_ext;
		}
		for(int i=0; i<glw::NUM_GL_EXTENSIONS; ++i)
		{
			const char* ext= (const char*)glGetStringi(GL_EXTENSIONS, i);
			if(0 == strcmp(extension, ext)) return GL_TRUE;
		}
	}
	else
	{
		const char* ext = (const char*)glGetString(GL_EXTENSIONS);
		if(ext)
		{
			int len = 0, i = 0, last_i = 0;
			for(i=0; i<0xfffff; ++i)
			{
				switch (ext[i])
				{
				case '\0':
					len = (i - last_i);
					if(ext_len == len && 0 == std::strncmp(&ext[last_i], extension, len)) return true;
					return false;
				case ' ':
					len = (i - last_i);
					if(ext_len == len && 0 == std::strncmp(&ext[last_i], extension, len)) return true;
					last_i = i + 1;
				default:
					continue;
				}
			}
		}
	}
	return false;
}

} // namespace axl.glw
} // namespace axl

#else
#error unsupported platform
#endif
